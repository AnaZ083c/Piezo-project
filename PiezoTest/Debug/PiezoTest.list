
PiezoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000767c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007804  08007804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007864  08007864  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800786c  0800786c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c10  20000180  080079f4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d90  080079f4  00021d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a38  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000392e  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244b0  00000000  00000000  0003f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e2d  00000000  00000000  00063b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca06e  00000000  00000000  0007b9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145a23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  00145a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077ec 	.word	0x080077ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080077ec 	.word	0x080077ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fbef 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f831 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f945 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d2:	f000 f8af 	bl	8000634 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d6:	f000 f8db 	bl	8000690 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004da:	f000 f909 	bl	80006f0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 fc57 	bl	8006d90 <MX_USB_DEVICE_Init>
  while (1)
  {
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);

    /* USER CODE END WHILE */
	  for (int i = 0; i < 10; i++) {
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	e013      	b.n	8000510 <main+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (i % 2 == 0));
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	bf0c      	ite	eq
 80004f2:	2301      	moveq	r3, #1
 80004f4:	2300      	movne	r3, #0
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	461a      	mov	r2, r3
 80004fa:	2108      	movs	r1, #8
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <main+0x6c>)
 80004fe:	f000 ff17 	bl	8001330 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000506:	f000 fc41 	bl	8000d8c <HAL_Delay>
	  for (int i = 0; i < 10; i++) {
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	3301      	adds	r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b09      	cmp	r3, #9
 8000514:	dde8      	ble.n	80004e8 <main+0x28>
	  } HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2108      	movs	r1, #8
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <main+0x6c>)
 800051c:	f000 ff08 	bl	8001330 <HAL_GPIO_WritePin>
	  HAL_Delay(50000);
 8000520:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000524:	f000 fc32 	bl	8000d8c <HAL_Delay>
	  for (int i = 0; i < 10; i++) {
 8000528:	e7db      	b.n	80004e2 <main+0x22>
 800052a:	bf00      	nop
 800052c:	40020000 	.word	0x40020000

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b098      	sub	sp, #96	; 0x60
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f007 f94c 	bl	80077dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <SystemClock_Config+0xfc>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a30      	ldr	r2, [pc, #192]	; (800062c <SystemClock_Config+0xfc>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <SystemClock_Config+0xfc>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <SystemClock_Config+0x100>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <SystemClock_Config+0x100>)
 8000588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0x100>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059a:	2301      	movs	r3, #1
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ae:	2308      	movs	r3, #8
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fe35 	bl	8003234 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005d0:	f000 f9d4 	bl	800097c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f896 	bl	8003724 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005fe:	f000 f9bd 	bl	800097c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000602:	2301      	movs	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fa6e 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800061e:	f000 f9ad 	bl	800097c <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3760      	adds	r7, #96	; 0x60
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f000 fe77 	bl	8001364 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f97e 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200003c0 	.word	0x200003c0
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_I2S3_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <MX_I2S3_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <MX_I2S3_Init+0x5c>)
 80006ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006d0:	f000 ff8c 	bl	80015ec <HAL_I2S_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006da:	f000 f94f 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000046c 	.word	0x2000046c
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI1_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI1_Init+0x64>)
 8000742:	f003 fb17 	bl	8003d74 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f916 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000414 	.word	0x20000414
 8000758:	40013000 	.word	0x40013000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b7a      	ldr	r3, [pc, #488]	; (8000960 <MX_GPIO_Init+0x204>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a79      	ldr	r2, [pc, #484]	; (8000960 <MX_GPIO_Init+0x204>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b77      	ldr	r3, [pc, #476]	; (8000960 <MX_GPIO_Init+0x204>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b73      	ldr	r3, [pc, #460]	; (8000960 <MX_GPIO_Init+0x204>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a72      	ldr	r2, [pc, #456]	; (8000960 <MX_GPIO_Init+0x204>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b70      	ldr	r3, [pc, #448]	; (8000960 <MX_GPIO_Init+0x204>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b6c      	ldr	r3, [pc, #432]	; (8000960 <MX_GPIO_Init+0x204>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a6b      	ldr	r2, [pc, #428]	; (8000960 <MX_GPIO_Init+0x204>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b69      	ldr	r3, [pc, #420]	; (8000960 <MX_GPIO_Init+0x204>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b65      	ldr	r3, [pc, #404]	; (8000960 <MX_GPIO_Init+0x204>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a64      	ldr	r2, [pc, #400]	; (8000960 <MX_GPIO_Init+0x204>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b62      	ldr	r3, [pc, #392]	; (8000960 <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <MX_GPIO_Init+0x204>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a5d      	ldr	r2, [pc, #372]	; (8000960 <MX_GPIO_Init+0x204>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <MX_GPIO_Init+0x204>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b57      	ldr	r3, [pc, #348]	; (8000960 <MX_GPIO_Init+0x204>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a56      	ldr	r2, [pc, #344]	; (8000960 <MX_GPIO_Init+0x204>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b54      	ldr	r3, [pc, #336]	; (8000960 <MX_GPIO_Init+0x204>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4851      	ldr	r0, [pc, #324]	; (8000964 <MX_GPIO_Init+0x208>)
 8000820:	f000 fd86 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	484f      	ldr	r0, [pc, #316]	; (8000968 <MX_GPIO_Init+0x20c>)
 800082a:	f000 fd81 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	484e      	ldr	r0, [pc, #312]	; (800096c <MX_GPIO_Init+0x210>)
 8000834:	f000 fd7c 	bl	8001330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000838:	2200      	movs	r2, #0
 800083a:	f24f 0110 	movw	r1, #61456	; 0xf010
 800083e:	484c      	ldr	r0, [pc, #304]	; (8000970 <MX_GPIO_Init+0x214>)
 8000840:	f000 fd76 	bl	8001330 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000844:	2308      	movs	r3, #8
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4842      	ldr	r0, [pc, #264]	; (8000964 <MX_GPIO_Init+0x208>)
 800085c:	f000 fbcc 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000860:	2301      	movs	r3, #1
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	483c      	ldr	r0, [pc, #240]	; (8000968 <MX_GPIO_Init+0x20c>)
 8000878:	f000 fbbe 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800087c:	2308      	movs	r3, #8
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088c:	2305      	movs	r3, #5
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4834      	ldr	r0, [pc, #208]	; (8000968 <MX_GPIO_Init+0x20c>)
 8000898:	f000 fbae 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0x218>)
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	482f      	ldr	r0, [pc, #188]	; (800096c <MX_GPIO_Init+0x210>)
 80008b0:	f000 fba2 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80008b4:	2308      	movs	r3, #8
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <MX_GPIO_Init+0x210>)
 80008cc:	f000 fb94 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d0:	2304      	movs	r3, #4
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4825      	ldr	r0, [pc, #148]	; (8000978 <MX_GPIO_Init+0x21c>)
 80008e4:	f000 fb88 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fa:	2305      	movs	r3, #5
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	481c      	ldr	r0, [pc, #112]	; (8000978 <MX_GPIO_Init+0x21c>)
 8000906:	f000 fb77 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800090a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800090e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_GPIO_Init+0x214>)
 8000924:	f000 fb68 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000928:	2320      	movs	r3, #32
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_GPIO_Init+0x214>)
 800093c:	f000 fb5c 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000940:	2302      	movs	r3, #2
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_GPIO_Init+0x218>)
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_GPIO_Init+0x208>)
 8000954:	f000 fb50 	bl	8000ff8 <HAL_GPIO_Init>

}
 8000958:	bf00      	nop
 800095a:	3730      	adds	r7, #48	; 0x30
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800
 8000964:	40021000 	.word	0x40021000
 8000968:	40020800 	.word	0x40020800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020c00 	.word	0x40020c00
 8000974:	10120000 	.word	0x10120000
 8000978:	40020400 	.word	0x40020400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_MspInit+0x4c>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <HAL_MspInit+0x4c>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x4c>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009c6:	2007      	movs	r0, #7
 80009c8:	f000 fad4 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800

080009d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <HAL_I2C_MspInit+0x84>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d12c      	bne.n	8000a54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	480c      	ldr	r0, [pc, #48]	; (8000a64 <HAL_I2C_MspInit+0x8c>)
 8000a34:	f000 fae0 	bl	8000ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a46:	6413      	str	r3, [r2, #64]	; 0x40
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_I2C_MspInit+0x88>)
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020400 	.word	0x40020400

08000a68 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a28      	ldr	r2, [pc, #160]	; (8000b28 <HAL_I2S_MspInit+0xc0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d14a      	bne.n	8000b20 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_I2S_MspInit+0xc4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aee:	2306      	movs	r3, #6
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <HAL_I2S_MspInit+0xc8>)
 8000afa:	f000 fa7d 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000afe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b10:	2306      	movs	r3, #6
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <HAL_I2S_MspInit+0xcc>)
 8000b1c:	f000 fa6c 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40003c00 	.word	0x40003c00
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020800 	.word	0x40020800

08000b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_SPI_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_SPI_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b92:	23e0      	movs	r3, #224	; 0xe0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ba2:	2305      	movs	r3, #5
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_SPI_MspInit+0x8c>)
 8000bae:	f000 fa23 	bl	8000ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40013000 	.word	0x40013000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f89a 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <OTG_FS_IRQHandler+0x10>)
 8000c22:	f001 fad3 	bl	80021cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20001988 	.word	0x20001988

08000c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SystemInit+0x20>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <SystemInit+0x20>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c5a:	490e      	ldr	r1, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c70:	4c0b      	ldr	r4, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7e:	f7ff ffd7 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f006 fd87 	bl	8007794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fc1b 	bl	80004c0 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000c98:	08007874 	.word	0x08007874
  ldr r2, =_sbss
 8000c9c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000ca0:	20001d90 	.word	0x20001d90

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f94f 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe54 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f967 	bl	8000fde <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f92f 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200004b4 	.word	0x200004b4

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200004b4 	.word	0x200004b4

08000d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff ffee 	bl	8000d74 <HAL_GetTick>
 8000d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da4:	d005      	beq.n	8000db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_Delay+0x44>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db2:	bf00      	nop
 8000db4:	f7ff ffde 	bl	8000d74 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d8f7      	bhi.n	8000db4 <HAL_Delay+0x28>
  {
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff29 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff3e 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff31 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff ffa2 	bl	8000f30 <SysTick_Config>
 8000fec:	4603      	mov	r3, r0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	e16b      	b.n	80012ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	429a      	cmp	r2, r3
 800102e:	f040 815a 	bne.w	80012e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b01      	cmp	r3, #1
 800103c:	d005      	beq.n	800104a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001046:	2b02      	cmp	r3, #2
 8001048:	d130      	bne.n	80010ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001080:	2201      	movs	r2, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	f003 0201 	and.w	r2, r3, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d017      	beq.n	80010e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d123      	bne.n	800113c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0203 	and.w	r2, r3, #3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80b4 	beq.w	80012e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	4a5f      	ldr	r2, [pc, #380]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800118c:	6453      	str	r3, [r2, #68]	; 0x44
 800118e:	4b5d      	ldr	r3, [pc, #372]	; (8001304 <HAL_GPIO_Init+0x30c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119a:	4a5b      	ldr	r2, [pc, #364]	; (8001308 <HAL_GPIO_Init+0x310>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	3302      	adds	r3, #2
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	220f      	movs	r2, #15
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a52      	ldr	r2, [pc, #328]	; (800130c <HAL_GPIO_Init+0x314>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02b      	beq.n	800121e <HAL_GPIO_Init+0x226>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x318>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x222>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a50      	ldr	r2, [pc, #320]	; (8001314 <HAL_GPIO_Init+0x31c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x21e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4f      	ldr	r2, [pc, #316]	; (8001318 <HAL_GPIO_Init+0x320>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x21a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4e      	ldr	r2, [pc, #312]	; (800131c <HAL_GPIO_Init+0x324>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x216>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <HAL_GPIO_Init+0x328>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x212>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4c      	ldr	r2, [pc, #304]	; (8001324 <HAL_GPIO_Init+0x32c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x20e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	; (8001328 <HAL_GPIO_Init+0x330>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x20a>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00e      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001202:	2308      	movs	r3, #8
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001206:	2306      	movs	r3, #6
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x228>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x228>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x310>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_GPIO_Init+0x334>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001262:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_GPIO_Init+0x334>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001268:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_GPIO_Init+0x334>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800128c:	4a27      	ldr	r2, [pc, #156]	; (800132c <HAL_GPIO_Init+0x334>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_GPIO_Init+0x334>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <HAL_GPIO_Init+0x334>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_GPIO_Init+0x334>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_GPIO_Init+0x334>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae90 	bls.w	8001014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40021c00 	.word	0x40021c00
 800132c:	40013c00 	.word	0x40013c00

08001330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
 800133c:	4613      	mov	r3, r2
 800133e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001340:	787b      	ldrb	r3, [r7, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800134c:	e003      	b.n	8001356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	041a      	lsls	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	619a      	str	r2, [r3, #24]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e12b      	b.n	80015ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fb24 	bl	80009d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2224      	movs	r2, #36	; 0x24
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c8:	f002 fb80 	bl	8003acc <HAL_RCC_GetPCLK1Freq>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a81      	ldr	r2, [pc, #516]	; (80015d8 <HAL_I2C_Init+0x274>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d807      	bhi.n	80013e8 <HAL_I2C_Init+0x84>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4a80      	ldr	r2, [pc, #512]	; (80015dc <HAL_I2C_Init+0x278>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	bf94      	ite	ls
 80013e0:	2301      	movls	r3, #1
 80013e2:	2300      	movhi	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	e006      	b.n	80013f6 <HAL_I2C_Init+0x92>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a7d      	ldr	r2, [pc, #500]	; (80015e0 <HAL_I2C_Init+0x27c>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	bf94      	ite	ls
 80013f0:	2301      	movls	r3, #1
 80013f2:	2300      	movhi	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0e7      	b.n	80015ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4a78      	ldr	r2, [pc, #480]	; (80015e4 <HAL_I2C_Init+0x280>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9b      	lsrs	r3, r3, #18
 8001408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	4a6a      	ldr	r2, [pc, #424]	; (80015d8 <HAL_I2C_Init+0x274>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d802      	bhi.n	8001438 <HAL_I2C_Init+0xd4>
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	e009      	b.n	800144c <HAL_I2C_Init+0xe8>
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	4a69      	ldr	r2, [pc, #420]	; (80015e8 <HAL_I2C_Init+0x284>)
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	099b      	lsrs	r3, r3, #6
 800144a:	3301      	adds	r3, #1
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	430b      	orrs	r3, r1
 8001452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800145e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	495c      	ldr	r1, [pc, #368]	; (80015d8 <HAL_I2C_Init+0x274>)
 8001468:	428b      	cmp	r3, r1
 800146a:	d819      	bhi.n	80014a0 <HAL_I2C_Init+0x13c>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e59      	subs	r1, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fbb1 f3f3 	udiv	r3, r1, r3
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001480:	400b      	ands	r3, r1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00a      	beq.n	800149c <HAL_I2C_Init+0x138>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1e59      	subs	r1, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fbb1 f3f3 	udiv	r3, r1, r3
 8001494:	3301      	adds	r3, #1
 8001496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149a:	e051      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 800149c:	2304      	movs	r3, #4
 800149e:	e04f      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <HAL_I2C_Init+0x168>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e58      	subs	r0, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ba:	3301      	adds	r3, #1
 80014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e012      	b.n	80014f2 <HAL_I2C_Init+0x18e>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	1e58      	subs	r0, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	0099      	lsls	r1, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_I2C_Init+0x196>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e022      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10e      	bne.n	8001520 <HAL_I2C_Init+0x1bc>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1e58      	subs	r0, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	440b      	add	r3, r1
 8001510:	fbb0 f3f3 	udiv	r3, r0, r3
 8001514:	3301      	adds	r3, #1
 8001516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800151e:	e00f      	b.n	8001540 <HAL_I2C_Init+0x1dc>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e58      	subs	r0, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	0099      	lsls	r1, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	fbb0 f3f3 	udiv	r3, r0, r3
 8001536:	3301      	adds	r3, #1
 8001538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	6809      	ldr	r1, [r1, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69da      	ldr	r2, [r3, #28]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800156e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6911      	ldr	r1, [r2, #16]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68d2      	ldr	r2, [r2, #12]
 800157a:	4311      	orrs	r1, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	000186a0 	.word	0x000186a0
 80015dc:	001e847f 	.word	0x001e847f
 80015e0:	003d08ff 	.word	0x003d08ff
 80015e4:	431bde83 	.word	0x431bde83
 80015e8:	10624dd3 	.word	0x10624dd3

080015ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e128      	b.n	8001850 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a90      	ldr	r2, [pc, #576]	; (8001858 <HAL_I2S_Init+0x26c>)
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fa25 	bl	8000a68 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2202      	movs	r2, #2
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001634:	f023 030f 	bic.w	r3, r3, #15
 8001638:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2202      	movs	r2, #2
 8001640:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d060      	beq.n	800170c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001652:	2310      	movs	r3, #16
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e001      	b.n	800165c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001658:	2320      	movs	r3, #32
 800165a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b20      	cmp	r3, #32
 8001662:	d802      	bhi.n	800166a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800166a:	2001      	movs	r0, #1
 800166c:	f002 fb24 	bl	8003cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001670:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800167a:	d125      	bne.n	80016c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d010      	beq.n	80016a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	fbb2 f2f3 	udiv	r2, r2, r3
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695b      	ldr	r3, [r3, #20]
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	3305      	adds	r3, #5
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e01f      	b.n	80016e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	461a      	mov	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	3305      	adds	r3, #5
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	e00e      	b.n	80016e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	3305      	adds	r3, #5
 80016e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4a5c      	ldr	r2, [pc, #368]	; (800185c <HAL_I2S_Init+0x270>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	e003      	b.n	8001714 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800170c:	2302      	movs	r3, #2
 800170e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d902      	bls.n	8001720 <HAL_I2S_Init+0x134>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	2bff      	cmp	r3, #255	; 0xff
 800171e:	d907      	bls.n	8001730 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f043 0210 	orr.w	r2, r3, #16
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e08f      	b.n	8001850 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	ea42 0103 	orr.w	r1, r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	430a      	orrs	r2, r1
 8001742:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800174e:	f023 030f 	bic.w	r3, r3, #15
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6851      	ldr	r1, [r2, #4]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6892      	ldr	r2, [r2, #8]
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	68d2      	ldr	r2, [r2, #12]
 8001760:	4311      	orrs	r1, r2
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6992      	ldr	r2, [r2, #24]
 8001766:	430a      	orrs	r2, r1
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001772:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d161      	bne.n	8001840 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a38      	ldr	r2, [pc, #224]	; (8001860 <HAL_I2S_Init+0x274>)
 8001780:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a37      	ldr	r2, [pc, #220]	; (8001864 <HAL_I2S_Init+0x278>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d101      	bne.n	8001790 <HAL_I2S_Init+0x1a4>
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_I2S_Init+0x27c>)
 800178e:	e001      	b.n	8001794 <HAL_I2S_Init+0x1a8>
 8001790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4932      	ldr	r1, [pc, #200]	; (8001864 <HAL_I2S_Init+0x278>)
 800179c:	428a      	cmp	r2, r1
 800179e:	d101      	bne.n	80017a4 <HAL_I2S_Init+0x1b8>
 80017a0:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_I2S_Init+0x27c>)
 80017a2:	e001      	b.n	80017a8 <HAL_I2S_Init+0x1bc>
 80017a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80017a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017ac:	f023 030f 	bic.w	r3, r3, #15
 80017b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <HAL_I2S_Init+0x278>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d101      	bne.n	80017c0 <HAL_I2S_Init+0x1d4>
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <HAL_I2S_Init+0x27c>)
 80017be:	e001      	b.n	80017c4 <HAL_I2S_Init+0x1d8>
 80017c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017c4:	2202      	movs	r2, #2
 80017c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_I2S_Init+0x278>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_I2S_Init+0x1ea>
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <HAL_I2S_Init+0x27c>)
 80017d4:	e001      	b.n	80017da <HAL_I2S_Init+0x1ee>
 80017d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017e6:	d003      	beq.n	80017f0 <HAL_I2S_Init+0x204>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d103      	bne.n	80017f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	e001      	b.n	80017fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001806:	4313      	orrs	r3, r2
 8001808:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001810:	4313      	orrs	r3, r2
 8001812:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800181a:	4313      	orrs	r3, r2
 800181c:	b29a      	uxth	r2, r3
 800181e:	897b      	ldrh	r3, [r7, #10]
 8001820:	4313      	orrs	r3, r2
 8001822:	b29b      	uxth	r3, r3
 8001824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001828:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_I2S_Init+0x278>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d101      	bne.n	8001838 <HAL_I2S_Init+0x24c>
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_I2S_Init+0x27c>)
 8001836:	e001      	b.n	800183c <HAL_I2S_Init+0x250>
 8001838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800183c:	897a      	ldrh	r2, [r7, #10]
 800183e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	08001963 	.word	0x08001963
 800185c:	cccccccd 	.word	0xcccccccd
 8001860:	08001a79 	.word	0x08001a79
 8001864:	40003800 	.word	0x40003800
 8001868:	40003400 	.word	0x40003400

0800186c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	1c9a      	adds	r2, r3, #2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10e      	bne.n	80018fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffb8 	bl	800186c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	b292      	uxth	r2, r2
 8001918:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	1c9a      	adds	r2, r3, #2
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001936:	b29b      	uxth	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10e      	bne.n	800195a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800194a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff93 	bl	8001880 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b04      	cmp	r3, #4
 800197c:	d13a      	bne.n	80019f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d109      	bne.n	800199c <I2S_IRQHandler+0x3a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001992:	2b40      	cmp	r3, #64	; 0x40
 8001994:	d102      	bne.n	800199c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffb4 	bl	8001904 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d126      	bne.n	80019f4 <I2S_IRQHandler+0x92>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b20      	cmp	r3, #32
 80019b2:	d11f      	bne.n	80019f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f043 0202 	orr.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff50 	bl	8001894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d136      	bne.n	8001a6e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d109      	bne.n	8001a1e <I2S_IRQHandler+0xbc>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a14:	2b80      	cmp	r3, #128	; 0x80
 8001a16:	d102      	bne.n	8001a1e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff ff45 	bl	80018a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d122      	bne.n	8001a6e <I2S_IRQHandler+0x10c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d11b      	bne.n	8001a6e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a44:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	f043 0204 	orr.w	r2, r3, #4
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff13 	bl	8001894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4aa2      	ldr	r2, [pc, #648]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001a92:	4ba2      	ldr	r3, [pc, #648]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a94:	e001      	b.n	8001a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a9b      	ldr	r2, [pc, #620]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d101      	bne.n	8001ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ab0:	4b9a      	ldr	r3, [pc, #616]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ab2:	e001      	b.n	8001ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac4:	d004      	beq.n	8001ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 8099 	bne.w	8001c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d107      	bne.n	8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f925 	bl	8001d34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f9c8 	bl	8001e94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	d13a      	bne.n	8001b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d035      	beq.n	8001b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a7e      	ldr	r2, [pc, #504]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001b22:	4b7e      	ldr	r3, [pc, #504]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b24:	e001      	b.n	8001b2a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4979      	ldr	r1, [pc, #484]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b32:	428b      	cmp	r3, r1
 8001b34:	d101      	bne.n	8001b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b36:	4b79      	ldr	r3, [pc, #484]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b38:	e001      	b.n	8001b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b42:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f043 0202 	orr.w	r2, r3, #2
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff fe88 	bl	8001894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	f040 80be 	bne.w	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80b8 	beq.w	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001baa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a59      	ldr	r2, [pc, #356]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001bb6:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bb8:	e001      	b.n	8001bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4954      	ldr	r1, [pc, #336]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bc6:	428b      	cmp	r3, r1
 8001bc8:	d101      	bne.n	8001bce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bcc:	e001      	b.n	8001bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bd6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe4a 	bl	8001894 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c00:	e084      	b.n	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d107      	bne.n	8001c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8be 	bl	8001d98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d107      	bne.n	8001c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f8fd 	bl	8001e30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3c:	2b40      	cmp	r3, #64	; 0x40
 8001c3e:	d12f      	bne.n	8001ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d02a      	beq.n	8001ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c58:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a2e      	ldr	r2, [pc, #184]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001c64:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c66:	e001      	b.n	8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4929      	ldr	r1, [pc, #164]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c74:	428b      	cmp	r3, r1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c7a:	e001      	b.n	8001c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fdfa 	bl	8001894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d131      	bne.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d02c      	beq.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cc0:	e001      	b.n	8001cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4912      	ldr	r1, [pc, #72]	; (8001d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cce:	428b      	cmp	r3, r1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cd4:	e001      	b.n	8001cda <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cde:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fdc5 	bl	8001894 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d0a:	e000      	b.n	8001d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d0c:	bf00      	nop
}
 8001d0e:	bf00      	nop
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40003800 	.word	0x40003800
 8001d1c:	40003400 	.word	0x40003400

08001d20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	1c99      	adds	r1, r3, #2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6251      	str	r1, [r2, #36]	; 0x24
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d113      	bne.n	8001d8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d106      	bne.n	8001d8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffc9 	bl	8001d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	1c99      	adds	r1, r3, #2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6251      	str	r1, [r2, #36]	; 0x24
 8001daa:	8819      	ldrh	r1, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <I2SEx_TxISR_I2SExt+0x90>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <I2SEx_TxISR_I2SExt+0x22>
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <I2SEx_TxISR_I2SExt+0x94>)
 8001db8:	e001      	b.n	8001dbe <I2SEx_TxISR_I2SExt+0x26>
 8001dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d121      	bne.n	8001e1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <I2SEx_TxISR_I2SExt+0x90>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <I2SEx_TxISR_I2SExt+0x50>
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <I2SEx_TxISR_I2SExt+0x94>)
 8001de6:	e001      	b.n	8001dec <I2SEx_TxISR_I2SExt+0x54>
 8001de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <I2SEx_TxISR_I2SExt+0x90>)
 8001df4:	428b      	cmp	r3, r1
 8001df6:	d101      	bne.n	8001dfc <I2SEx_TxISR_I2SExt+0x64>
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <I2SEx_TxISR_I2SExt+0x94>)
 8001dfa:	e001      	b.n	8001e00 <I2SEx_TxISR_I2SExt+0x68>
 8001dfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d106      	bne.n	8001e1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ff81 	bl	8001d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40003800 	.word	0x40003800
 8001e2c:	40003400 	.word	0x40003400

08001e30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68d8      	ldr	r0, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	1c99      	adds	r1, r3, #2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e48:	b282      	uxth	r2, r0
 8001e4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d113      	bne.n	8001e8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff4a 	bl	8001d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <I2SEx_RxISR_I2SExt+0x90>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <I2SEx_RxISR_I2SExt+0x16>
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <I2SEx_RxISR_I2SExt+0x94>)
 8001ea8:	e001      	b.n	8001eae <I2SEx_RxISR_I2SExt+0x1a>
 8001eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eae:	68d8      	ldr	r0, [r3, #12]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	1c99      	adds	r1, r3, #2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001eba:	b282      	uxth	r2, r0
 8001ebc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d121      	bne.n	8001f1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <I2SEx_RxISR_I2SExt+0x90>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <I2SEx_RxISR_I2SExt+0x50>
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <I2SEx_RxISR_I2SExt+0x94>)
 8001ee2:	e001      	b.n	8001ee8 <I2SEx_RxISR_I2SExt+0x54>
 8001ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	490d      	ldr	r1, [pc, #52]	; (8001f24 <I2SEx_RxISR_I2SExt+0x90>)
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	d101      	bne.n	8001ef8 <I2SEx_RxISR_I2SExt+0x64>
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <I2SEx_RxISR_I2SExt+0x94>)
 8001ef6:	e001      	b.n	8001efc <I2SEx_RxISR_I2SExt+0x68>
 8001ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001efc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d106      	bne.n	8001f1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff03 	bl	8001d20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40003800 	.word	0x40003800
 8001f28:	40003400 	.word	0x40003400

08001f2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	b08f      	sub	sp, #60	; 0x3c
 8001f30:	af0a      	add	r7, sp, #40	; 0x28
 8001f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e10f      	b.n	800215e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d106      	bne.n	8001f5e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f005 f8f9 	bl	8007150 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 f896 	bl	80040ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	687e      	ldr	r6, [r7, #4]
 8001f8a:	466d      	mov	r5, sp
 8001f8c:	f106 0410 	add.w	r4, r6, #16
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa0:	1d33      	adds	r3, r6, #4
 8001fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f001 ff6e 	bl	8003e86 <USB_CoreInit>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0d0      	b.n	800215e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 f884 	bl	80040d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e04a      	b.n	8002064 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	333d      	adds	r3, #61	; 0x3d
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	1a9b      	subs	r3, r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	333c      	adds	r3, #60	; 0x3c
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	b298      	uxth	r0, r3
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3342      	adds	r3, #66	; 0x42
 800200a:	4602      	mov	r2, r0
 800200c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	333f      	adds	r3, #63	; 0x3f
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3344      	adds	r3, #68	; 0x44
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3348      	adds	r3, #72	; 0x48
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3350      	adds	r3, #80	; 0x50
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	3301      	adds	r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d3af      	bcc.n	8001fce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e044      	b.n	80020fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	3301      	adds	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	429a      	cmp	r2, r3
 8002106:	d3b5      	bcc.n	8002074 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	687e      	ldr	r6, [r7, #4]
 8002110:	466d      	mov	r5, sp
 8002112:	f106 0410 	add.w	r4, r6, #16
 8002116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800211c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800211e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002122:	e885 0003 	stmia.w	r5, {r0, r1}
 8002126:	1d33      	adds	r3, r6, #4
 8002128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212a:	6838      	ldr	r0, [r7, #0]
 800212c:	f001 fffa 	bl	8004124 <USB_DevInit>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00d      	b.n	800215e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f003 f842 	bl	80051e0 <USB_DevDisconnect>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002166 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_PCD_Start+0x1c>
 800217e:	2302      	movs	r3, #2
 8002180:	e020      	b.n	80021c4 <HAL_PCD_Start+0x5e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	2b01      	cmp	r3, #1
 8002190:	d109      	bne.n	80021a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002196:	2b01      	cmp	r3, #1
 8002198:	d005      	beq.n	80021a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f001 ff6e 	bl	800408c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fff2 	bl	800519e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b08d      	sub	sp, #52	; 0x34
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 f8b0 	bl	8005348 <USB_GetMode>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 839d 	bne.w	800292a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f814 	bl	8005222 <USB_ReadInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8393 	beq.w	8002928 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 f80b 	bl	8005222 <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d107      	bne.n	8002226 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f002 0202 	and.w	r2, r2, #2
 8002224:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f002 fff9 	bl	8005222 <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b10      	cmp	r3, #16
 8002238:	d161      	bne.n	80022fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0210 	bic.w	r2, r2, #16
 8002248:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	4613      	mov	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	3304      	adds	r3, #4
 8002268:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	0c5b      	lsrs	r3, r3, #17
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	2b02      	cmp	r3, #2
 8002274:	d124      	bne.n	80022c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d035      	beq.n	80022ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800228c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6a38      	ldr	r0, [r7, #32]
 8002296:	f002 fe5f 	bl	8004f58 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a6:	441a      	add	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b8:	441a      	add	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	619a      	str	r2, [r3, #24]
 80022be:	e016      	b.n	80022ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	0c5b      	lsrs	r3, r3, #17
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d110      	bne.n	80022ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022d2:	2208      	movs	r2, #8
 80022d4:	4619      	mov	r1, r3
 80022d6:	6a38      	ldr	r0, [r7, #32]
 80022d8:	f002 fe3e 	bl	8004f58 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	699a      	ldr	r2, [r3, #24]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e8:	441a      	add	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0210 	orr.w	r2, r2, #16
 80022fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 ff8d 	bl	8005222 <USB_ReadInterrupts>
 8002308:	4603      	mov	r3, r0
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002312:	d16e      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f002 ff93 	bl	8005248 <USB_ReadDevAllOutEpInterrupt>
 8002322:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002324:	e062      	b.n	80023ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d057      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f002 ffb8 	bl	80052b0 <USB_ReadDevOutEPInterrupt>
 8002340:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00c      	beq.n	8002366 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002358:	461a      	mov	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800235e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 fdb1 	bl	8002ec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00c      	beq.n	800238a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237c:	461a      	mov	r2, r3
 800237e:	2308      	movs	r3, #8
 8002380:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 feab 	bl	80030e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	4413      	add	r3, r2
 800239c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a0:	461a      	mov	r2, r3
 80023a2:	2310      	movs	r3, #16
 80023a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023bc:	461a      	mov	r2, r3
 80023be:	2320      	movs	r3, #32
 80023c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	461a      	mov	r2, r3
 80023da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	3301      	adds	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	085b      	lsrs	r3, r3, #1
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d199      	bne.n	8002326 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 ff13 	bl	8005222 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002406:	f040 80c0 	bne.w	800258a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ff34 	bl	800527c <USB_ReadDevAllInEpInterrupt>
 8002414:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800241a:	e0b2      	b.n	8002582 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 80a7 	beq.w	8002576 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f002 ff5a 	bl	80052ec <USB_ReadDevInEPInterrupt>
 8002438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d057      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	2201      	movs	r2, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	69f9      	ldr	r1, [r7, #28]
 8002460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002464:	4013      	ands	r3, r2
 8002466:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002474:	461a      	mov	r2, r3
 8002476:	2301      	movs	r3, #1
 8002478:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d132      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	3348      	adds	r3, #72	; 0x48
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4403      	add	r3, r0
 80024a2:	3344      	adds	r3, #68	; 0x44
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4419      	add	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4403      	add	r3, r0
 80024b6:	3348      	adds	r3, #72	; 0x48
 80024b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d113      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x31c>
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c4:	4613      	mov	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3350      	adds	r3, #80	; 0x50
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024e0:	461a      	mov	r2, r3
 80024e2:	2101      	movs	r1, #1
 80024e4:	f002 ff62 	bl	80053ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f004 febd 	bl	800726e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2308      	movs	r3, #8
 800250e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002526:	461a      	mov	r2, r3
 8002528:	2310      	movs	r3, #16
 800252a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002542:	461a      	mov	r2, r3
 8002544:	2340      	movs	r3, #64	; 0x40
 8002546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255e:	461a      	mov	r2, r3
 8002560:	2302      	movs	r3, #2
 8002562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fc1b 	bl	8002dac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	3301      	adds	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f af49 	bne.w	800241c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f002 fe47 	bl	8005222 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800259a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800259e:	d122      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d108      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025c6:	2100      	movs	r1, #0
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fe27 	bl	800321c <HAL_PCDEx_LPM_Callback>
 80025ce:	e002      	b.n	80025d6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f004 fec3 	bl	800735c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80025e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f002 fe19 	bl	8005222 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025fa:	d112      	bne.n	8002622 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d102      	bne.n	8002612 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f004 fe7f 	bl	8007310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695a      	ldr	r2, [r3, #20]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002620:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fdfb 	bl	8005222 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	f040 80c7 	bne.w	80027c8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2110      	movs	r1, #16
 8002654:	4618      	mov	r0, r3
 8002656:	f001 fec9 	bl	80043ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265e:	e056      	b.n	800270e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800266c:	461a      	mov	r2, r3
 800266e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002672:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002684:	0151      	lsls	r1, r2, #5
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	440a      	add	r2, r1
 800268a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800268e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002692:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80026e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f8:	0151      	lsls	r1, r2, #5
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	440a      	add	r2, r1
 80026fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002706:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	3301      	adds	r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002714:	429a      	cmp	r2, r3
 8002716:	d3a3      	bcc.n	8002660 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002726:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800272a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d016      	beq.n	8002762 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002744:	f043 030b 	orr.w	r3, r3, #11
 8002748:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275a:	f043 030b 	orr.w	r3, r3, #11
 800275e:	6453      	str	r3, [r2, #68]	; 0x44
 8002760:	e015      	b.n	800278e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002774:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002778:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002788:	f043 030b 	orr.w	r3, r3, #11
 800278c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027b2:	461a      	mov	r2, r3
 80027b4:	f002 fdfa 	bl	80053ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fd28 	bl	8005222 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027dc:	d124      	bne.n	8002828 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 fdbe 	bl	8005364 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fe5e 	bl	80044ae <USB_GetDevSpeed>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681c      	ldr	r4, [r3, #0]
 80027fe:	f001 f959 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8002802:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	4620      	mov	r0, r4
 800280e:	f001 fb9b 	bl	8003f48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f004 fd53 	bl	80072be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695a      	ldr	r2, [r3, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002826:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f002 fcf8 	bl	8005222 <USB_ReadInterrupts>
 8002832:	4603      	mov	r3, r0
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b08      	cmp	r3, #8
 800283a:	d10a      	bne.n	8002852 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f004 fd30 	bl	80072a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f002 0208 	and.w	r2, r2, #8
 8002850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fce3 	bl	8005222 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002866:	d10f      	bne.n	8002888 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f004 fd92 	bl	800739c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fcc8 	bl	8005222 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289c:	d10f      	bne.n	80028be <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f004 fd65 	bl	8007378 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fcad 	bl	8005222 <USB_ReadInterrupts>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d10a      	bne.n	80028ea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f004 fd73 	bl	80073c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f002 fc97 	bl	8005222 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d115      	bne.n	800292a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f004 fd63 	bl	80073dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e000      	b.n	800292a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002928:	bf00      	nop
    }
  }
}
 800292a:	3734      	adds	r7, #52	; 0x34
 800292c:	46bd      	mov	sp, r7
 800292e:	bd90      	pop	{r4, r7, pc}

08002930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_PCD_SetAddress+0x1a>
 8002946:	2302      	movs	r3, #2
 8002948:	e013      	b.n	8002972 <HAL_PCD_SetAddress+0x42>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f002 fbf5 	bl	8005152 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	4608      	mov	r0, r1
 8002984:	4611      	mov	r1, r2
 8002986:	461a      	mov	r2, r3
 8002988:	4603      	mov	r3, r0
 800298a:	70fb      	strb	r3, [r7, #3]
 800298c:	460b      	mov	r3, r1
 800298e:	803b      	strh	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	da0f      	bge.n	80029c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	f003 020f 	and.w	r2, r3, #15
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	3338      	adds	r3, #56	; 0x38
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	3304      	adds	r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2201      	movs	r2, #1
 80029bc:	705a      	strb	r2, [r3, #1]
 80029be:	e00f      	b.n	80029e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029ec:	883a      	ldrh	r2, [r7, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	78ba      	ldrb	r2, [r7, #2]
 80029f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	785b      	ldrb	r3, [r3, #1]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a0a:	78bb      	ldrb	r3, [r7, #2]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_PCD_EP_Open+0xaa>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e00e      	b.n	8002a42 <HAL_PCD_EP_Open+0xc8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68f9      	ldr	r1, [r7, #12]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 fd60 	bl	80044f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a40:	7afb      	ldrb	r3, [r7, #11]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da0f      	bge.n	8002a7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	3338      	adds	r3, #56	; 0x38
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	705a      	strb	r2, [r3, #1]
 8002a7c:	e00f      	b.n	8002a9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_PCD_EP_Close+0x6e>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e00e      	b.n	8002ad6 <HAL_PCD_EP_Close+0x8c>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68f9      	ldr	r1, [r7, #12]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 fd9e 	bl	8004608 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b086      	sub	sp, #24
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	460b      	mov	r3, r1
 8002aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	7afb      	ldrb	r3, [r7, #11]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4413      	add	r3, r2
 8002b04:	3304      	adds	r3, #4
 8002b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b20:	7afb      	ldrb	r3, [r7, #11]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6979      	ldr	r1, [r7, #20]
 8002b52:	f002 f879 	bl	8004c48 <USB_EP0StartXfer>
 8002b56:	e008      	b.n	8002b6a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	f001 fe2b 	bl	80047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3338      	adds	r3, #56	; 0x38
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2201      	movs	r2, #1
 8002be2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002be4:	7afb      	ldrb	r3, [r7, #11]
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bfe:	7afb      	ldrb	r3, [r7, #11]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	6979      	ldr	r1, [r7, #20]
 8002c16:	f002 f817 	bl	8004c48 <USB_EP0StartXfer>
 8002c1a:	e008      	b.n	8002c2e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	6979      	ldr	r1, [r7, #20]
 8002c2a:	f001 fdc9 	bl	80047c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	460b      	mov	r3, r1
 8002c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	f003 020f 	and.w	r2, r3, #15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d901      	bls.n	8002c56 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e050      	b.n	8002cf8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da0f      	bge.n	8002c7e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	f003 020f 	and.w	r2, r3, #15
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	3338      	adds	r3, #56	; 0x38
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	4413      	add	r3, r2
 8002c72:	3304      	adds	r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	705a      	strb	r2, [r3, #1]
 8002c7c:	e00d      	b.n	8002c9a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	3304      	adds	r3, #4
 8002c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_EP_SetStall+0x82>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e01e      	b.n	8002cf8 <HAL_PCD_EP_SetStall+0xc0>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f002 f96e 	bl	8004faa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6818      	ldr	r0, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	b2d9      	uxtb	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f002 fb5f 	bl	80053ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d901      	bls.n	8002d1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e042      	b.n	8002da4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da0f      	bge.n	8002d46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	3338      	adds	r3, #56	; 0x38
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	705a      	strb	r2, [r3, #1]
 8002d44:	e00f      	b.n	8002d66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 020f 	and.w	r2, r3, #15
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_PCD_EP_ClrStall+0x86>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e00e      	b.n	8002da4 <HAL_PCD_EP_ClrStall+0xa4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68f9      	ldr	r1, [r7, #12]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 f976 	bl	8005086 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af02      	add	r7, sp, #8
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	3338      	adds	r3, #56	; 0x38
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d901      	bls.n	8002de4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e06c      	b.n	8002ebe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d902      	bls.n	8002e00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	3303      	adds	r3, #3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e08:	e02b      	b.n	8002e62 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d902      	bls.n	8002e26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3303      	adds	r3, #3
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68d9      	ldr	r1, [r3, #12]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4603      	mov	r3, r0
 8002e44:	6978      	ldr	r0, [r7, #20]
 8002e46:	f002 f852 	bl	8004eee <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	441a      	add	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	441a      	add	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d809      	bhi.n	8002e8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d203      	bcs.n	8002e8c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1be      	bne.n	8002e0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d811      	bhi.n	8002ebc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	6939      	ldr	r1, [r7, #16]
 8002eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eb8:	4013      	ands	r3, r2
 8002eba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	333c      	adds	r3, #60	; 0x3c
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	f040 80a0 	bne.w	8003040 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d015      	beq.n	8002f36 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a72      	ldr	r2, [pc, #456]	; (80030d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	f240 80dd 	bls.w	80030ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80d7 	beq.w	80030ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f32:	6093      	str	r3, [r2, #8]
 8002f34:	e0cb      	b.n	80030ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2320      	movs	r3, #32
 8002f50:	6093      	str	r3, [r2, #8]
 8002f52:	e0bc      	b.n	80030ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 80b7 	bne.w	80030ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a5d      	ldr	r2, [pc, #372]	; (80030d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d90f      	bls.n	8002f88 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f84:	6093      	str	r3, [r2, #8]
 8002f86:	e0a2      	b.n	80030ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f9a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	0159      	lsls	r1, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002fae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4403      	add	r3, r0
 8002fbe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002fc2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4403      	add	r3, r0
 8002fe6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4419      	add	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4403      	add	r3, r0
 8002ffc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003000:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <PCD_EP_OutXfrComplete_int+0x16a>
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d108      	bne.n	8003032 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800302a:	461a      	mov	r2, r3
 800302c:	2101      	movs	r1, #1
 800302e:	f002 f9bd 	bl	80053ac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f004 f8fd 	bl	8007238 <HAL_PCD_DataOutStageCallback>
 800303e:	e046      	b.n	80030ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a26      	ldr	r2, [pc, #152]	; (80030dc <PCD_EP_OutXfrComplete_int+0x214>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d124      	bne.n	8003092 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305e:	461a      	mov	r2, r3
 8003060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003064:	6093      	str	r3, [r2, #8]
 8003066:	e032      	b.n	80030ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	2320      	movs	r3, #32
 8003082:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f004 f8d4 	bl	8007238 <HAL_PCD_DataOutStageCallback>
 8003090:	e01d      	b.n	80030ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d114      	bne.n	80030c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d108      	bne.n	80030c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030ba:	461a      	mov	r2, r3
 80030bc:	2100      	movs	r1, #0
 80030be:	f002 f975 	bl	80053ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f004 f8b5 	bl	8007238 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	4f54300a 	.word	0x4f54300a
 80030dc:	4f54310a 	.word	0x4f54310a

080030e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	333c      	adds	r3, #60	; 0x3c
 80030f8:	3304      	adds	r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <PCD_EP_OutSetupPacket_int+0x88>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d90e      	bls.n	8003134 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312c:	461a      	mov	r2, r3
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f004 f86d 	bl	8007214 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <PCD_EP_OutSetupPacket_int+0x88>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d90c      	bls.n	800315c <PCD_EP_OutSetupPacket_int+0x7c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003154:	461a      	mov	r2, r3
 8003156:	2101      	movs	r1, #1
 8003158:	f002 f928 	bl	80053ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	4f54300a 	.word	0x4f54300a

0800316c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	70fb      	strb	r3, [r7, #3]
 8003178:	4613      	mov	r3, r2
 800317a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d107      	bne.n	800319a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800318a:	883b      	ldrh	r3, [r7, #0]
 800318c:	0419      	lsls	r1, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	430a      	orrs	r2, r1
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
 8003198:	e028      	b.n	80031ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	4413      	add	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
 80031ac:	e00d      	b.n	80031ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	3340      	adds	r3, #64	; 0x40
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
 80031c6:	3301      	adds	r3, #1
 80031c8:	73fb      	strb	r3, [r7, #15]
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3ec      	bcc.n	80031ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80031d4:	883b      	ldrh	r3, [r7, #0]
 80031d6:	0418      	lsls	r0, r3, #16
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	3b01      	subs	r3, #1
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4302      	orrs	r2, r0
 80031e4:	3340      	adds	r3, #64	; 0x40
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e264      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d075      	beq.n	800333e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003252:	4ba3      	ldr	r3, [pc, #652]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b04      	cmp	r3, #4
 800325c:	d00c      	beq.n	8003278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800325e:	4ba0      	ldr	r3, [pc, #640]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003266:	2b08      	cmp	r3, #8
 8003268:	d112      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800326a:	4b9d      	ldr	r3, [pc, #628]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003276:	d10b      	bne.n	8003290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	4b99      	ldr	r3, [pc, #612]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d05b      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d157      	bne.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e23f      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d106      	bne.n	80032a8 <HAL_RCC_OscConfig+0x74>
 800329a:	4b91      	ldr	r3, [pc, #580]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a90      	ldr	r2, [pc, #576]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b8b      	ldr	r3, [pc, #556]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a8a      	ldr	r2, [pc, #552]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a87      	ldr	r2, [pc, #540]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xb0>
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a83      	ldr	r2, [pc, #524]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a80      	ldr	r2, [pc, #512]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd fd42 	bl	8000d74 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fd fd3e 	bl	8000d74 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e204      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fd fd2e 	bl	8000d74 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7fd fd2a 	bl	8000d74 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1f0      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b6c      	ldr	r3, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003356:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003362:	4b5f      	ldr	r3, [pc, #380]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b5c      	ldr	r3, [pc, #368]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c4      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4952      	ldr	r1, [pc, #328]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_RCC_OscConfig+0x2b0>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033aa:	f7fd fce3 	bl	8000d74 <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fd fcdf 	bl	8000d74 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a5      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b46      	ldr	r3, [pc, #280]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4940      	ldr	r1, [pc, #256]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b3f      	ldr	r3, [pc, #252]	; (80034e4 <HAL_RCC_OscConfig+0x2b0>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fd fcc2 	bl	8000d74 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fd fcbe 	bl	8000d74 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e184      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d030      	beq.n	8003480 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d016      	beq.n	8003454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b30      	ldr	r3, [pc, #192]	; (80034e8 <HAL_RCC_OscConfig+0x2b4>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fd fca2 	bl	8000d74 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003434:	f7fd fc9e 	bl	8000d74 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e164      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x200>
 8003452:	e015      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_OscConfig+0x2b4>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345a:	f7fd fc8b 	bl	8000d74 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003462:	f7fd fc87 	bl	8000d74 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e14d      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a0 	beq.w	80035ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10f      	bne.n	80034be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b0f      	ldr	r3, [pc, #60]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_OscConfig+0x2b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d121      	bne.n	800350e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <HAL_RCC_OscConfig+0x2b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_RCC_OscConfig+0x2b8>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034d6:	f7fd fc4d 	bl	8000d74 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034dc:	e011      	b.n	8003502 <HAL_RCC_OscConfig+0x2ce>
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000
 80034e8:	42470e80 	.word	0x42470e80
 80034ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f0:	f7fd fc40 	bl	8000d74 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e106      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003502:	4b85      	ldr	r3, [pc, #532]	; (8003718 <HAL_RCC_OscConfig+0x4e4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x2f0>
 8003516:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	e01c      	b.n	800355e <HAL_RCC_OscConfig+0x32a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b05      	cmp	r3, #5
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x312>
 800352c:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a7a      	ldr	r2, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
 8003538:	4b78      	ldr	r3, [pc, #480]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a77      	ldr	r2, [pc, #476]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e00b      	b.n	800355e <HAL_RCC_OscConfig+0x32a>
 8003546:	4b75      	ldr	r3, [pc, #468]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a74      	ldr	r2, [pc, #464]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	4b72      	ldr	r3, [pc, #456]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	4a71      	ldr	r2, [pc, #452]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d015      	beq.n	8003592 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd fc05 	bl	8000d74 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fd fc01 	bl	8000d74 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	; 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0c5      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	4b65      	ldr	r3, [pc, #404]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ee      	beq.n	800356e <HAL_RCC_OscConfig+0x33a>
 8003590:	e014      	b.n	80035bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003592:	f7fd fbef 	bl	8000d74 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359a:	f7fd fbeb 	bl	8000d74 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e0af      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b0:	4b5a      	ldr	r3, [pc, #360]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1ee      	bne.n	800359a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c2:	4b56      	ldr	r3, [pc, #344]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a55      	ldr	r2, [pc, #340]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 80035c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 809b 	beq.w	800370e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035d8:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 030c 	and.w	r3, r3, #12
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d05c      	beq.n	800369e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d141      	bne.n	8003670 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ec:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x4ec>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fd fbbf 	bl	8000d74 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fd fbbb 	bl	8000d74 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e081      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360c:	4b43      	ldr	r3, [pc, #268]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f0      	bne.n	80035fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	019b      	lsls	r3, r3, #6
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	085b      	lsrs	r3, r3, #1
 8003630:	3b01      	subs	r3, #1
 8003632:	041b      	lsls	r3, r3, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	4937      	ldr	r1, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003642:	4b37      	ldr	r3, [pc, #220]	; (8003720 <HAL_RCC_OscConfig+0x4ec>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fd fb94 	bl	8000d74 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd fb90 	bl	8000d74 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e056      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003662:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x41c>
 800366e:	e04e      	b.n	800370e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x4ec>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003676:	f7fd fb7d 	bl	8000d74 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800367e:	f7fd fb79 	bl	8000d74 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e03f      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f0      	bne.n	800367e <HAL_RCC_OscConfig+0x44a>
 800369c:	e037      	b.n	800370e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e032      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <HAL_RCC_OscConfig+0x4e8>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d028      	beq.n	800370a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d121      	bne.n	800370a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d11a      	bne.n	800370a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036da:	4013      	ands	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d111      	bne.n	800370a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d107      	bne.n	800370a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003706:	429a      	cmp	r2, r3
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3718      	adds	r7, #24
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40007000 	.word	0x40007000
 800371c:	40023800 	.word	0x40023800
 8003720:	42470060 	.word	0x42470060

08003724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e0cc      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d90c      	bls.n	8003760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b63      	ldr	r3, [pc, #396]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0b8      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a52      	ldr	r2, [pc, #328]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800379a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800379c:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	494d      	ldr	r1, [pc, #308]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d044      	beq.n	8003844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b47      	ldr	r3, [pc, #284]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d119      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e07f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d003      	beq.n	80037e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e2:	4b3f      	ldr	r3, [pc, #252]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e067      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4934      	ldr	r1, [pc, #208]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003814:	f7fd faae 	bl	8000d74 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381a:	e00a      	b.n	8003832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381c:	f7fd faaa 	bl	8000d74 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f241 3288 	movw	r2, #5000	; 0x1388
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e04f      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	429a      	cmp	r2, r3
 8003842:	d1eb      	bne.n	800381c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d20c      	bcs.n	800386c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e032      	b.n	80038d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4916      	ldr	r1, [pc, #88]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	490e      	ldr	r1, [pc, #56]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038aa:	f000 f821 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	490a      	ldr	r1, [pc, #40]	; (80038e4 <HAL_RCC_ClockConfig+0x1c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
 80038c2:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c6:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1c8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fd fa0e 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023c00 	.word	0x40023c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	0800784c 	.word	0x0800784c
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	2300      	movs	r3, #0
 8003902:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003908:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d00d      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x40>
 8003914:	2b08      	cmp	r3, #8
 8003916:	f200 80bd 	bhi.w	8003a94 <HAL_RCC_GetSysClockFreq+0x1a4>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x34>
 800391e:	2b04      	cmp	r3, #4
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x3a>
 8003922:	e0b7      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003926:	60bb      	str	r3, [r7, #8]
       break;
 8003928:	e0b7      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800392a:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800392c:	60bb      	str	r3, [r7, #8]
      break;
 800392e:	e0b4      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003930:	4b5d      	ldr	r3, [pc, #372]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800393a:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04d      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003946:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	099b      	lsrs	r3, r3, #6
 800394c:	461a      	mov	r2, r3
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003956:	f04f 0100 	mov.w	r1, #0
 800395a:	ea02 0800 	and.w	r8, r2, r0
 800395e:	ea03 0901 	and.w	r9, r3, r1
 8003962:	4640      	mov	r0, r8
 8003964:	4649      	mov	r1, r9
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	014b      	lsls	r3, r1, #5
 8003970:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003974:	0142      	lsls	r2, r0, #5
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	ebb0 0008 	subs.w	r0, r0, r8
 800397e:	eb61 0109 	sbc.w	r1, r1, r9
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	018b      	lsls	r3, r1, #6
 800398c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003990:	0182      	lsls	r2, r0, #6
 8003992:	1a12      	subs	r2, r2, r0
 8003994:	eb63 0301 	sbc.w	r3, r3, r1
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	00d9      	lsls	r1, r3, #3
 80039a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a6:	00d0      	lsls	r0, r2, #3
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	eb12 0208 	adds.w	r2, r2, r8
 80039b0:	eb43 0309 	adc.w	r3, r3, r9
 80039b4:	f04f 0000 	mov.w	r0, #0
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	0259      	lsls	r1, r3, #9
 80039be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039c2:	0250      	lsls	r0, r2, #9
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f7fc fbf8 	bl	80001c8 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e04a      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	461a      	mov	r2, r3
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039f2:	f04f 0100 	mov.w	r1, #0
 80039f6:	ea02 0400 	and.w	r4, r2, r0
 80039fa:	ea03 0501 	and.w	r5, r3, r1
 80039fe:	4620      	mov	r0, r4
 8003a00:	4629      	mov	r1, r5
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	014b      	lsls	r3, r1, #5
 8003a0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a10:	0142      	lsls	r2, r0, #5
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	1b00      	subs	r0, r0, r4
 8003a18:	eb61 0105 	sbc.w	r1, r1, r5
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	018b      	lsls	r3, r1, #6
 8003a26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a2a:	0182      	lsls	r2, r0, #6
 8003a2c:	1a12      	subs	r2, r2, r0
 8003a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a32:	f04f 0000 	mov.w	r0, #0
 8003a36:	f04f 0100 	mov.w	r1, #0
 8003a3a:	00d9      	lsls	r1, r3, #3
 8003a3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a40:	00d0      	lsls	r0, r2, #3
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	1912      	adds	r2, r2, r4
 8003a48:	eb45 0303 	adc.w	r3, r5, r3
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	0299      	lsls	r1, r3, #10
 8003a56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a5a:	0290      	lsls	r0, r2, #10
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	f7fc fbac 	bl	80001c8 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4613      	mov	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0c1b      	lsrs	r3, r3, #16
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	3301      	adds	r3, #1
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	60bb      	str	r3, [r7, #8]
      break;
 8003a92:	e002      	b.n	8003a9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a96:	60bb      	str	r3, [r7, #8]
      break;
 8003a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	00f42400 	.word	0x00f42400
 8003ab0:	007a1200 	.word	0x007a1200

08003ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab8:	4b03      	ldr	r3, [pc, #12]	; (8003ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aba:	681b      	ldr	r3, [r3, #0]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000000 	.word	0x20000000

08003acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ad0:	f7ff fff0 	bl	8003ab4 <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0a9b      	lsrs	r3, r3, #10
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	0800785c 	.word	0x0800785c

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d035      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b1c:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b22:	f7fd f927 	bl	8000d74 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b2a:	f7fd f923 	bl	8000d74 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e0b0      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b3c:	4b5b      	ldr	r3, [pc, #364]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f0      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	019a      	lsls	r2, r3, #6
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	071b      	lsls	r3, r3, #28
 8003b54:	4955      	ldr	r1, [pc, #340]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b5c:	4b52      	ldr	r3, [pc, #328]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b62:	f7fd f907 	bl	8000d74 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b6a:	f7fd f903 	bl	8000d74 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e090      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b7c:	4b4b      	ldr	r3, [pc, #300]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8083 	beq.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	4b44      	ldr	r3, [pc, #272]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3e      	ldr	r2, [pc, #248]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bbe:	f7fd f8d9 	bl	8000d74 <HAL_GetTick>
 8003bc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bc6:	f7fd f8d5 	bl	8000d74 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e062      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bd8:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be4:	4b31      	ldr	r3, [pc, #196]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02f      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d028      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0c:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c1e:	4b23      	ldr	r3, [pc, #140]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d114      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c2a:	f7fd f8a3 	bl	8000d74 <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd f89f 	bl	8000d74 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e02a      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c60:	d10d      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c88:	6093      	str	r3, [r2, #8]
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	4905      	ldr	r1, [pc, #20]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	42470068 	.word	0x42470068
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	42470e40 	.word	0x42470e40

08003cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d13e      	bne.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003cd6:	4b23      	ldr	r3, [pc, #140]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d12f      	bne.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003cee:	617b      	str	r3, [r7, #20]
          break;
 8003cf0:	e02f      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cfe:	d108      	bne.n	8003d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d08:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	e007      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d12:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d1a:	4a15      	ldr	r2, [pc, #84]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3c:	0f1b      	lsrs	r3, r3, #28
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
          break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
          break;
 8003d50:	bf00      	nop
        }
      }
      break;
 8003d52:	bf00      	nop
    }
  }
  return frequency;
 8003d54:	697b      	ldr	r3, [r7, #20]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40023800 	.word	0x40023800
 8003d68:	00bb8000 	.word	0x00bb8000
 8003d6c:	007a1200 	.word	0x007a1200
 8003d70:	00f42400 	.word	0x00f42400

08003d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e07b      	b.n	8003e7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d96:	d009      	beq.n	8003dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
 8003d9e:	e005      	b.n	8003dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fc feb6 	bl	8000b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	ea42 0103 	orr.w	r1, r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	f003 0104 	and.w	r1, r3, #4
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f003 0210 	and.w	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e86:	b084      	sub	sp, #16
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	f107 001c 	add.w	r0, r7, #28
 8003e94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d122      	bne.n	8003ee4 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f001 fac5 	bl	8005468 <USB_CoreReset>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e01a      	b.n	8003f1a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f001 fab9 	bl	8005468 <USB_CoreReset>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d106      	bne.n	8003f0e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f0c:	e005      	b.n	8003f1a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10b      	bne.n	8003f38 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f043 0206 	orr.w	r2, r3, #6
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f44:	b004      	add	sp, #16
 8003f46:	4770      	bx	lr

08003f48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d165      	bne.n	8004028 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a41      	ldr	r2, [pc, #260]	; (8004064 <USB_SetTurnaroundTime+0x11c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d906      	bls.n	8003f72 <USB_SetTurnaroundTime+0x2a>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a40      	ldr	r2, [pc, #256]	; (8004068 <USB_SetTurnaroundTime+0x120>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d202      	bcs.n	8003f72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f6c:	230f      	movs	r3, #15
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e062      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a3c      	ldr	r2, [pc, #240]	; (8004068 <USB_SetTurnaroundTime+0x120>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d306      	bcc.n	8003f88 <USB_SetTurnaroundTime+0x40>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a3b      	ldr	r2, [pc, #236]	; (800406c <USB_SetTurnaroundTime+0x124>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d202      	bcs.n	8003f88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f82:	230e      	movs	r3, #14
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e057      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4a38      	ldr	r2, [pc, #224]	; (800406c <USB_SetTurnaroundTime+0x124>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d306      	bcc.n	8003f9e <USB_SetTurnaroundTime+0x56>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a37      	ldr	r2, [pc, #220]	; (8004070 <USB_SetTurnaroundTime+0x128>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d202      	bcs.n	8003f9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f98:	230d      	movs	r3, #13
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e04c      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <USB_SetTurnaroundTime+0x128>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d306      	bcc.n	8003fb4 <USB_SetTurnaroundTime+0x6c>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4a32      	ldr	r2, [pc, #200]	; (8004074 <USB_SetTurnaroundTime+0x12c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d802      	bhi.n	8003fb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fae:	230c      	movs	r3, #12
 8003fb0:	617b      	str	r3, [r7, #20]
 8003fb2:	e041      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a2f      	ldr	r2, [pc, #188]	; (8004074 <USB_SetTurnaroundTime+0x12c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d906      	bls.n	8003fca <USB_SetTurnaroundTime+0x82>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4a2e      	ldr	r2, [pc, #184]	; (8004078 <USB_SetTurnaroundTime+0x130>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d802      	bhi.n	8003fca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fc4:	230b      	movs	r3, #11
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e036      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <USB_SetTurnaroundTime+0x130>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d906      	bls.n	8003fe0 <USB_SetTurnaroundTime+0x98>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <USB_SetTurnaroundTime+0x134>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d802      	bhi.n	8003fe0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003fda:	230a      	movs	r3, #10
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e02b      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4a26      	ldr	r2, [pc, #152]	; (800407c <USB_SetTurnaroundTime+0x134>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d906      	bls.n	8003ff6 <USB_SetTurnaroundTime+0xae>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4a25      	ldr	r2, [pc, #148]	; (8004080 <USB_SetTurnaroundTime+0x138>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d202      	bcs.n	8003ff6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ff0:	2309      	movs	r3, #9
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e020      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4a21      	ldr	r2, [pc, #132]	; (8004080 <USB_SetTurnaroundTime+0x138>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d306      	bcc.n	800400c <USB_SetTurnaroundTime+0xc4>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4a20      	ldr	r2, [pc, #128]	; (8004084 <USB_SetTurnaroundTime+0x13c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d802      	bhi.n	800400c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004006:	2308      	movs	r3, #8
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e015      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <USB_SetTurnaroundTime+0x13c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d906      	bls.n	8004022 <USB_SetTurnaroundTime+0xda>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <USB_SetTurnaroundTime+0x140>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d202      	bcs.n	8004022 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800401c:	2307      	movs	r3, #7
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e00a      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004022:	2306      	movs	r3, #6
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e007      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800402e:	2309      	movs	r3, #9
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e001      	b.n	8004038 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004034:	2309      	movs	r3, #9
 8004036:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	029b      	lsls	r3, r3, #10
 800404c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004050:	431a      	orrs	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	00d8acbf 	.word	0x00d8acbf
 8004068:	00e4e1c0 	.word	0x00e4e1c0
 800406c:	00f42400 	.word	0x00f42400
 8004070:	01067380 	.word	0x01067380
 8004074:	011a499f 	.word	0x011a499f
 8004078:	01312cff 	.word	0x01312cff
 800407c:	014ca43f 	.word	0x014ca43f
 8004080:	016e3600 	.word	0x016e3600
 8004084:	01a6ab1f 	.word	0x01a6ab1f
 8004088:	01e84800 	.word	0x01e84800

0800408c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0201 	bic.w	r2, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d106      	bne.n	80040fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	e00b      	b.n	8004114 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	e001      	b.n	8004114 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e003      	b.n	800411c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004114:	2032      	movs	r0, #50	; 0x32
 8004116:	f7fc fe39 	bl	8000d8c <HAL_Delay>

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004124:	b084      	sub	sp, #16
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e009      	b.n	8004158 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	3340      	adds	r3, #64	; 0x40
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	2200      	movs	r2, #0
 8004150:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3301      	adds	r3, #1
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b0e      	cmp	r3, #14
 800415c:	d9f2      	bls.n	8004144 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	2b00      	cmp	r3, #0
 8004162:	d11c      	bne.n	800419e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
 800419c:	e00b      	b.n	80041b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041bc:	461a      	mov	r2, r3
 80041be:	2300      	movs	r3, #0
 80041c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c8:	4619      	mov	r1, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d0:	461a      	mov	r2, r3
 80041d2:	680b      	ldr	r3, [r1, #0]
 80041d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d10c      	bne.n	80041f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d104      	bne.n	80041ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041e2:	2100      	movs	r1, #0
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f949 	bl	800447c <USB_SetDevSpeed>
 80041ea:	e008      	b.n	80041fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041ec:	2101      	movs	r1, #1
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f944 	bl	800447c <USB_SetDevSpeed>
 80041f4:	e003      	b.n	80041fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041f6:	2103      	movs	r1, #3
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f93f 	bl	800447c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041fe:	2110      	movs	r1, #16
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8f3 	bl	80043ec <USB_FlushTxFifo>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f911 	bl	8004438 <USB_FlushRxFifo>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e043      	b.n	80042d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800425c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004260:	d118      	bne.n	8004294 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004274:	461a      	mov	r2, r3
 8004276:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	e013      	b.n	80042a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800428a:	461a      	mov	r2, r3
 800428c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e008      	b.n	80042a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	461a      	mov	r2, r3
 80042a2:	2300      	movs	r3, #0
 80042a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	015a      	lsls	r2, r3, #5
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b2:	461a      	mov	r2, r3
 80042b4:	2300      	movs	r3, #0
 80042b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	461a      	mov	r2, r3
 80042c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	3301      	adds	r3, #1
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d3b7      	bcc.n	800424a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	e043      	b.n	8004368 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f6:	d118      	bne.n	800432a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430a:	461a      	mov	r2, r3
 800430c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e013      	b.n	800433c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	e008      	b.n	800433c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	461a      	mov	r2, r3
 8004338:	2300      	movs	r3, #0
 800433a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	2300      	movs	r3, #0
 800434c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	461a      	mov	r2, r3
 800435c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004360:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3301      	adds	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d3b7      	bcc.n	80042e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004382:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004390:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f043 0210 	orr.w	r2, r3, #16
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <USB_DevInit+0x2c4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f043 0208 	orr.w	r2, r3, #8
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d107      	bne.n	80043d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043d0:	f043 0304 	orr.w	r3, r3, #4
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043e4:	b004      	add	sp, #16
 80043e6:	4770      	bx	lr
 80043e8:	803c3800 	.word	0x803c3800

080043ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3301      	adds	r3, #1
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <USB_FlushTxFifo+0x48>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e006      	b.n	8004426 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b20      	cmp	r3, #32
 8004422:	d0f0      	beq.n	8004406 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	00030d40 	.word	0x00030d40

08004438 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2210      	movs	r2, #16
 8004448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <USB_FlushRxFifo+0x40>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e006      	b.n	800446a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d0f0      	beq.n	800444a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	00030d40 	.word	0x00030d40

0800447c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	68f9      	ldr	r1, [r7, #12]
 8004498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0306 	and.w	r3, r3, #6
 80044c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
 80044d2:	e00a      	b.n	80044ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d002      	beq.n	80044e0 <USB_GetDevSpeed+0x32>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d102      	bne.n	80044e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044e0:	2302      	movs	r3, #2
 80044e2:	75fb      	strb	r3, [r7, #23]
 80044e4:	e001      	b.n	80044ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044e6:	230f      	movs	r3, #15
 80044e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d13a      	bne.n	800458a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	b29b      	uxth	r3, r3
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004532:	4313      	orrs	r3, r2
 8004534:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d155      	bne.n	80045f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	78db      	ldrb	r3, [r3, #3]
 8004566:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004568:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	059b      	lsls	r3, r3, #22
 800456e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004570:	4313      	orrs	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e036      	b.n	80045f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004590:	69da      	ldr	r2, [r3, #28]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	2101      	movs	r1, #1
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11a      	bne.n	80045f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	78db      	ldrb	r3, [r3, #3]
 80045dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045de:	430b      	orrs	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	0151      	lsls	r1, r2, #5
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	440a      	add	r2, r1
 80045ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d161      	bne.n	80046e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800463a:	d11f      	bne.n	800467c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800465a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800467a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2101      	movs	r1, #1
 800468e:	fa01 f303 	lsl.w	r3, r1, r3
 8004692:	b29b      	uxth	r3, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469c:	4013      	ands	r3, r2
 800469e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f303 	lsl.w	r3, r1, r3
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c0:	4013      	ands	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0159      	lsls	r1, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	440b      	add	r3, r1
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	4619      	mov	r1, r3
 80046e0:	4b35      	ldr	r3, [pc, #212]	; (80047b8 <USB_DeactivateEndpoint+0x1b0>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	600b      	str	r3, [r1, #0]
 80046e6:	e060      	b.n	80047aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fe:	d11f      	bne.n	8004740 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800471e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800473e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	43db      	mvns	r3, r3
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004760:	4013      	ands	r3, r2
 8004762:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	43db      	mvns	r3, r3
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004784:	4013      	ands	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	0159      	lsls	r1, r3, #5
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	440b      	add	r3, r1
 800479e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a2:	4619      	mov	r1, r3
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <USB_DeactivateEndpoint+0x1b4>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	ec337800 	.word	0xec337800
 80047bc:	eff37800 	.word	0xeff37800

080047c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08a      	sub	sp, #40	; 0x28
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	4613      	mov	r3, r2
 80047cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 815c 	bne.w	8004a9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d132      	bne.n	8004850 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004804:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004808:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800480c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	440a      	add	r2, r1
 8004824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800482c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004848:	0cdb      	lsrs	r3, r3, #19
 800484a:	04db      	lsls	r3, r3, #19
 800484c:	6113      	str	r3, [r2, #16]
 800484e:	e074      	b.n	800493a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	0cdb      	lsrs	r3, r3, #19
 800486c:	04db      	lsls	r3, r3, #19
 800486e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800488e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	6959      	ldr	r1, [r3, #20]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	440b      	add	r3, r1
 80048ac:	1e59      	subs	r1, r3, #1
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b6:	04d9      	lsls	r1, r3, #19
 80048b8:	4b9d      	ldr	r3, [pc, #628]	; (8004b30 <USB_EPStartXfer+0x370>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	0148      	lsls	r0, r1, #5
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	4401      	add	r1, r0
 80048c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e2:	69b9      	ldr	r1, [r7, #24]
 80048e4:	0148      	lsls	r0, r1, #5
 80048e6:	69f9      	ldr	r1, [r7, #28]
 80048e8:	4401      	add	r1, r0
 80048ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048ee:	4313      	orrs	r3, r2
 80048f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	78db      	ldrb	r3, [r3, #3]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d11f      	bne.n	800493a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004914:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004918:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004934:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004938:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d14b      	bne.n	80049d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	78db      	ldrb	r3, [r3, #3]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d128      	bne.n	80049b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d110      	bne.n	8004996 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e00f      	b.n	80049b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	0151      	lsls	r1, r2, #5
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	440a      	add	r2, r1
 80049ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e12f      	b.n	8004c38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	78db      	ldrb	r3, [r3, #3]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d015      	beq.n	8004a2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8117 	beq.w	8004c38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a26:	4313      	orrs	r3, r2
 8004a28:	634b      	str	r3, [r1, #52]	; 0x34
 8004a2a:	e105      	b.n	8004c38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d110      	bne.n	8004a5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e00f      	b.n	8004a7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68d9      	ldr	r1, [r3, #12]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781a      	ldrb	r2, [r3, #0]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	b298      	uxth	r0, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	4603      	mov	r3, r0
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fa2b 	bl	8004eee <USB_WritePacket>
 8004a98:	e0ce      	b.n	8004c38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab4:	0cdb      	lsrs	r3, r3, #19
 8004ab6:	04db      	lsls	r3, r3, #19
 8004ab8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ad8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004adc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d126      	bne.n	8004b34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	69b9      	ldr	r1, [r7, #24]
 8004afe:	0148      	lsls	r0, r1, #5
 8004b00:	69f9      	ldr	r1, [r7, #28]
 8004b02:	4401      	add	r1, r0
 8004b04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2a:	6113      	str	r3, [r2, #16]
 8004b2c:	e036      	b.n	8004b9c <USB_EPStartXfer+0x3dc>
 8004b2e:	bf00      	nop
 8004b30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	04d9      	lsls	r1, r3, #19
 8004b5c:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <USB_EPStartXfer+0x484>)
 8004b5e:	400b      	ands	r3, r1
 8004b60:	69b9      	ldr	r1, [r7, #24]
 8004b62:	0148      	lsls	r0, r1, #5
 8004b64:	69f9      	ldr	r1, [r7, #28]
 8004b66:	4401      	add	r1, r0
 8004b68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	8af9      	ldrh	r1, [r7, #22]
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	0148      	lsls	r0, r1, #5
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	4401      	add	r1, r0
 8004b94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10d      	bne.n	8004bbe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68d9      	ldr	r1, [r3, #12]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	460a      	mov	r2, r1
 8004bbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	78db      	ldrb	r3, [r3, #3]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d128      	bne.n	8004c18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d110      	bne.n	8004bf8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00f      	b.n	8004c18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	1ff80000 	.word	0x1ff80000

08004c48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f040 80cd 	bne.w	8004e04 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d132      	bne.n	8004cd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd0:	0cdb      	lsrs	r3, r3, #19
 8004cd2:	04db      	lsls	r3, r3, #19
 8004cd4:	6113      	str	r3, [r2, #16]
 8004cd6:	e04e      	b.n	8004d76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf2:	0cdb      	lsrs	r3, r3, #19
 8004cf4:	04db      	lsls	r3, r3, #19
 8004cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d903      	bls.n	8004d30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	0148      	lsls	r0, r1, #5
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	4401      	add	r1, r0
 8004d6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d72:	4313      	orrs	r3, r2
 8004d74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d11e      	bne.n	8004dba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e092      	b.n	8004ee0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d07e      	beq.n	8004ee0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	f003 030f 	and.w	r3, r3, #15
 8004df2:	2101      	movs	r1, #1
 8004df4:	fa01 f303 	lsl.w	r3, r1, r3
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	634b      	str	r3, [r1, #52]	; 0x34
 8004e02:	e06d      	b.n	8004ee0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1e:	0cdb      	lsrs	r3, r3, #19
 8004e20:	04db      	lsls	r3, r3, #19
 8004e22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e46:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8e:	6939      	ldr	r1, [r7, #16]
 8004e90:	0148      	lsls	r0, r1, #5
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	4401      	add	r1, r0
 8004e96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d10d      	bne.n	8004ec0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	68d9      	ldr	r1, [r3, #12]
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	460a      	mov	r2, r1
 8004ebe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b089      	sub	sp, #36	; 0x24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	461a      	mov	r2, r3
 8004efc:	460b      	mov	r3, r1
 8004efe:	71fb      	strb	r3, [r7, #7]
 8004f00:	4613      	mov	r3, r2
 8004f02:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004f0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11a      	bne.n	8004f4a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f14:	88bb      	ldrh	r3, [r7, #4]
 8004f16:	3303      	adds	r3, #3
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	e00f      	b.n	8004f42 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	031a      	lsls	r2, r3, #12
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2e:	461a      	mov	r2, r3
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3eb      	bcc.n	8004f22 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3724      	adds	r7, #36	; 0x24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b089      	sub	sp, #36	; 0x24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	3303      	adds	r3, #3
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	e00b      	b.n	8004f94 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	3301      	adds	r3, #1
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d3ef      	bcc.n	8004f7c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3724      	adds	r7, #36	; 0x24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d12c      	bne.n	8005020 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db12      	blt.n	8004ffe <USB_EPSetStall+0x54>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00f      	beq.n	8004ffe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	0151      	lsls	r1, r2, #5
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	440a      	add	r2, r1
 8004ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ffc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	0151      	lsls	r1, r2, #5
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	440a      	add	r2, r1
 8005014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e02b      	b.n	8005078 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	db12      	blt.n	8005058 <USB_EPSetStall+0xae>
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00f      	beq.n	8005058 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005056:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d128      	bne.n	80050f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	78db      	ldrb	r3, [r3, #3]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d003      	beq.n	80050d2 <USB_EPClearStall+0x4c>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	78db      	ldrb	r3, [r3, #3]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d138      	bne.n	8005144 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e027      	b.n	8005144 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005112:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	78db      	ldrb	r3, [r3, #3]
 8005118:	2b03      	cmp	r3, #3
 800511a:	d003      	beq.n	8005124 <USB_EPClearStall+0x9e>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	78db      	ldrb	r3, [r3, #3]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d10f      	bne.n	8005144 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005142:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005170:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005174:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005186:	68f9      	ldr	r1, [r7, #12]
 8005188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800519e:	b480      	push	{r7}
 80051a0:	b085      	sub	sp, #20
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051b8:	f023 0303 	bic.w	r3, r3, #3
 80051bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051cc:	f023 0302 	bic.w	r3, r3, #2
 80051d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051fa:	f023 0303 	bic.w	r3, r3, #3
 80051fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520e:	f043 0302 	orr.w	r3, r3, #2
 8005212:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4013      	ands	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800523a:	68fb      	ldr	r3, [r7, #12]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	0c1b      	lsrs	r3, r3, #16
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	b29b      	uxth	r3, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052de:	68bb      	ldr	r3, [r7, #8]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
 800531c:	01db      	lsls	r3, r3, #7
 800531e:	b2db      	uxtb	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800533a:	68bb      	ldr	r3, [r7, #8]
}
 800533c:	4618      	mov	r0, r3
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0301 	and.w	r3, r3, #1
}
 8005358:	4618      	mov	r0, r3
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3714      	adds	r7, #20
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	460b      	mov	r3, r1
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	333c      	adds	r3, #60	; 0x3c
 80053c2:	3304      	adds	r3, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4a26      	ldr	r2, [pc, #152]	; (8005464 <USB_EP0_OutStart+0xb8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d90a      	bls.n	80053e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e0:	d101      	bne.n	80053e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e037      	b.n	8005456 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005400:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005414:	f043 0318 	orr.w	r3, r3, #24
 8005418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800542c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800542e:	7afb      	ldrb	r3, [r7, #11]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10f      	bne.n	8005454 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	4f54300a 	.word	0x4f54300a

08005468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a13      	ldr	r2, [pc, #76]	; (80054cc <USB_CoreReset+0x64>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e01b      	b.n	80054be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <USB_CoreReset+0x64>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d0f0      	beq.n	800549e <USB_CoreReset+0x36>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054e0:	f002 f914 	bl	800770c <USBD_static_malloc>
 80054e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d105      	bne.n	80054f8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80054f4:	2302      	movs	r3, #2
 80054f6:	e066      	b.n	80055c6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	7c1b      	ldrb	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d119      	bne.n	800553c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800550c:	2202      	movs	r2, #2
 800550e:	2181      	movs	r1, #129	; 0x81
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 ffd8 	bl	80074c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800551c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005520:	2202      	movs	r2, #2
 8005522:	2101      	movs	r1, #1
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f001 ffce 	bl	80074c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2210      	movs	r2, #16
 8005536:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800553a:	e016      	b.n	800556a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800553c:	2340      	movs	r3, #64	; 0x40
 800553e:	2202      	movs	r2, #2
 8005540:	2181      	movs	r1, #129	; 0x81
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 ffbf 	bl	80074c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	2202      	movs	r2, #2
 8005552:	2101      	movs	r1, #1
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f001 ffb6 	bl	80074c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2210      	movs	r2, #16
 8005566:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800556a:	2308      	movs	r3, #8
 800556c:	2203      	movs	r2, #3
 800556e:	2182      	movs	r1, #130	; 0x82
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 ffa8 	bl	80074c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7c1b      	ldrb	r3, [r3, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d109      	bne.n	80055b4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055aa:	2101      	movs	r1, #1
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f002 f879 	bl	80076a4 <USBD_LL_PrepareReceive>
 80055b2:	e007      	b.n	80055c4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055ba:	2340      	movs	r3, #64	; 0x40
 80055bc:	2101      	movs	r1, #1
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f002 f870 	bl	80076a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b082      	sub	sp, #8
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80055da:	2181      	movs	r1, #129	; 0x81
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 ff98 	bl	8007512 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055e8:	2101      	movs	r1, #1
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 ff91 	bl	8007512 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055f8:	2182      	movs	r1, #130	; 0x82
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f001 ff89 	bl	8007512 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800562a:	4618      	mov	r0, r3
 800562c:	f002 f87c 	bl	8007728 <USBD_static_free>
    pdev->pClassData = NULL;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005654:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	e0af      	b.n	80057cc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005674:	2b00      	cmp	r3, #0
 8005676:	d03f      	beq.n	80056f8 <USBD_CDC_Setup+0xb4>
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 809f 	bne.w	80057bc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	88db      	ldrh	r3, [r3, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d02e      	beq.n	80056e4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b25b      	sxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	da16      	bge.n	80056be <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800569c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	88d2      	ldrh	r2, [r2, #6]
 80056a2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	88db      	ldrh	r3, [r3, #6]
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	bf28      	it	cs
 80056ac:	2307      	movcs	r3, #7
 80056ae:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	89fa      	ldrh	r2, [r7, #14]
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f001 fae9 	bl	8006c8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80056bc:	e085      	b.n	80057ca <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	785a      	ldrb	r2, [r3, #1]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	88db      	ldrh	r3, [r3, #6]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80056d4:	6939      	ldr	r1, [r7, #16]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	88db      	ldrh	r3, [r3, #6]
 80056da:	461a      	mov	r2, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fb02 	bl	8006ce6 <USBD_CtlPrepareRx>
      break;
 80056e2:	e072      	b.n	80057ca <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	7850      	ldrb	r0, [r2, #1]
 80056f0:	2200      	movs	r2, #0
 80056f2:	6839      	ldr	r1, [r7, #0]
 80056f4:	4798      	blx	r3
      break;
 80056f6:	e068      	b.n	80057ca <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b0b      	cmp	r3, #11
 80056fe:	d852      	bhi.n	80057a6 <USBD_CDC_Setup+0x162>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <USBD_CDC_Setup+0xc4>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	08005739 	.word	0x08005739
 800570c:	080057b5 	.word	0x080057b5
 8005710:	080057a7 	.word	0x080057a7
 8005714:	080057a7 	.word	0x080057a7
 8005718:	080057a7 	.word	0x080057a7
 800571c:	080057a7 	.word	0x080057a7
 8005720:	080057a7 	.word	0x080057a7
 8005724:	080057a7 	.word	0x080057a7
 8005728:	080057a7 	.word	0x080057a7
 800572c:	080057a7 	.word	0x080057a7
 8005730:	08005763 	.word	0x08005763
 8005734:	0800578d 	.word	0x0800578d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b03      	cmp	r3, #3
 8005742:	d107      	bne.n	8005754 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005744:	f107 030a 	add.w	r3, r7, #10
 8005748:	2202      	movs	r2, #2
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 fa9e 	bl	8006c8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005752:	e032      	b.n	80057ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fa28 	bl	8006bac <USBD_CtlError>
            ret = USBD_FAIL;
 800575c:	2303      	movs	r3, #3
 800575e:	75fb      	strb	r3, [r7, #23]
          break;
 8005760:	e02b      	b.n	80057ba <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b03      	cmp	r3, #3
 800576c:	d107      	bne.n	800577e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800576e:	f107 030d 	add.w	r3, r7, #13
 8005772:	2201      	movs	r2, #1
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fa89 	bl	8006c8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800577c:	e01d      	b.n	80057ba <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800577e:	6839      	ldr	r1, [r7, #0]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f001 fa13 	bl	8006bac <USBD_CtlError>
            ret = USBD_FAIL;
 8005786:	2303      	movs	r3, #3
 8005788:	75fb      	strb	r3, [r7, #23]
          break;
 800578a:	e016      	b.n	80057ba <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b03      	cmp	r3, #3
 8005796:	d00f      	beq.n	80057b8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fa06 	bl	8006bac <USBD_CtlError>
            ret = USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057a4:	e008      	b.n	80057b8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f001 f9ff 	bl	8006bac <USBD_CtlError>
          ret = USBD_FAIL;
 80057ae:	2303      	movs	r3, #3
 80057b0:	75fb      	strb	r3, [r7, #23]
          break;
 80057b2:	e002      	b.n	80057ba <USBD_CDC_Setup+0x176>
          break;
 80057b4:	bf00      	nop
 80057b6:	e008      	b.n	80057ca <USBD_CDC_Setup+0x186>
          break;
 80057b8:	bf00      	nop
      }
      break;
 80057ba:	e006      	b.n	80057ca <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f001 f9f4 	bl	8006bac <USBD_CtlError>
      ret = USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	75fb      	strb	r3, [r7, #23]
      break;
 80057c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80057ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e04f      	b.n	8005896 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3318      	adds	r3, #24
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d029      	beq.n	8005868 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	3318      	adds	r3, #24
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	78f9      	ldrb	r1, [r7, #3]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	460b      	mov	r3, r1
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	1a5b      	subs	r3, r3, r1
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4403      	add	r3, r0
 8005834:	3344      	adds	r3, #68	; 0x44
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	fbb2 f1f3 	udiv	r1, r2, r3
 800583c:	fb03 f301 	mul.w	r3, r3, r1
 8005840:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005842:	2b00      	cmp	r3, #0
 8005844:	d110      	bne.n	8005868 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3318      	adds	r3, #24
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800585a:	78f9      	ldrb	r1, [r7, #3]
 800585c:	2300      	movs	r3, #0
 800585e:	2200      	movs	r2, #0
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 fefe 	bl	8007662 <USBD_LL_Transmit>
 8005866:	e015      	b.n	8005894 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	68ba      	ldr	r2, [r7, #8]
 8005886:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	460b      	mov	r3, r1
 80058a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	e015      	b.n	80058ec <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 ff0e 	bl	80076e6 <USBD_LL_GetRxDataSize>
 80058ca:	4602      	mov	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058e6:	4611      	mov	r1, r2
 80058e8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005902:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800590a:	2303      	movs	r3, #3
 800590c:	e01b      	b.n	8005946 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <USBD_CDC_EP0_RxReady+0x50>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	d010      	beq.n	8005944 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005930:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005938:	b292      	uxth	r2, r2
 800593a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2243      	movs	r2, #67	; 0x43
 800595c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800595e:	4b03      	ldr	r3, [pc, #12]	; (800596c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000094 	.word	0x20000094

08005970 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2243      	movs	r2, #67	; 0x43
 800597c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800597e:	4b03      	ldr	r3, [pc, #12]	; (800598c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000050 	.word	0x20000050

08005990 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2243      	movs	r2, #67	; 0x43
 800599c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	200000d8 	.word	0x200000d8

080059b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	220a      	movs	r2, #10
 80059bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059be:	4b03      	ldr	r3, [pc, #12]	; (80059cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	2000000c 	.word	0x2000000c

080059d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e004      	b.n	80059ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b087      	sub	sp, #28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e008      	b.n	8005a2a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
 8005a3e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e004      	b.n	8005a5c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a76:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e016      	b.n	8005ab4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	7c1b      	ldrb	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fe02 	bl	80076a4 <USBD_LL_PrepareReceive>
 8005aa0:	e007      	b.n	8005ab2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aa8:	2340      	movs	r3, #64	; 0x40
 8005aaa:	2101      	movs	r1, #1
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f001 fdf9 	bl	80076a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e01f      	b.n	8005b14 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	79fa      	ldrb	r2, [r7, #7]
 8005b06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f001 fc75 	bl	80073f8 <USBD_LL_Init>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e016      	b.n	8005b62 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00b      	beq.n	8005b60 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f107 020e 	add.w	r2, r7, #14
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
 8005b58:	4602      	mov	r2, r0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f001 fc8c 	bl	8007490 <USBD_LL_Start>
 8005b78:	4603      	mov	r3, r0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	78fa      	ldrb	r2, [r7, #3]
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d007      	beq.n	8005bf6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
  }

  return USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 ff90 	bl	8006b38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c26:	461a      	mov	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c34:	f003 031f 	and.w	r3, r3, #31
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d01a      	beq.n	8005c72 <USBD_LL_SetupStage+0x72>
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d822      	bhi.n	8005c86 <USBD_LL_SetupStage+0x86>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <USBD_LL_SetupStage+0x4a>
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d00a      	beq.n	8005c5e <USBD_LL_SetupStage+0x5e>
 8005c48:	e01d      	b.n	8005c86 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa62 	bl	800611c <USBD_StdDevReq>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5c:	e020      	b.n	8005ca0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 fac6 	bl	80061f8 <USBD_StdItfReq>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e016      	b.n	8005ca0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fb05 	bl	800628a <USBD_StdEPReq>
 8005c80:	4603      	mov	r3, r0
 8005c82:	73fb      	strb	r3, [r7, #15]
      break;
 8005c84:	e00c      	b.n	8005ca0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 fc5b 	bl	8007550 <USBD_LL_StallEP>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c9e:	bf00      	nop
  }

  return ret;
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d138      	bne.n	8005d30 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005cc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d14a      	bne.n	8005d66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d913      	bls.n	8005d04 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bf28      	it	cs
 8005cf6:	4613      	movcs	r3, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f001 f80f 	bl	8006d20 <USBD_CtlContinueRx>
 8005d02:	e030      	b.n	8005d66 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d10b      	bne.n	8005d28 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f001 f80a 	bl	8006d42 <USBD_CtlSendStatus>
 8005d2e:	e01a      	b.n	8005d66 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d114      	bne.n	8005d66 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	7afa      	ldrb	r2, [r7, #11]
 8005d52:	4611      	mov	r1, r2
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	e000      	b.n	8005d68 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d16b      	bne.n	8005e5c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3314      	adds	r3, #20
 8005d88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d156      	bne.n	8005e42 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d914      	bls.n	8005dca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 ff84 	bl	8006cc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f001 fc6e 	bl	80076a4 <USBD_LL_PrepareReceive>
 8005dc8:	e03b      	b.n	8005e42 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d11c      	bne.n	8005e10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d316      	bcc.n	8005e10 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d20f      	bcs.n	8005e10 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2100      	movs	r1, #0
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 ff65 	bl	8006cc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e02:	2300      	movs	r3, #0
 8005e04:	2200      	movs	r2, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f001 fc4b 	bl	80076a4 <USBD_LL_PrepareReceive>
 8005e0e:	e018      	b.n	8005e42 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d10b      	bne.n	8005e34 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e34:	2180      	movs	r1, #128	; 0x80
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f001 fb8a 	bl	8007550 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 ff93 	bl	8006d68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d122      	bne.n	8005e92 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff fe98 	bl	8005b82 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e5a:	e01a      	b.n	8005e92 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d114      	bne.n	8005e92 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	7afa      	ldrb	r2, [r7, #11]
 8005e7e:	4611      	mov	r1, r2
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	4798      	blx	r3
 8005e84:	4603      	mov	r3, r0
 8005e86:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d001      	beq.n	8005e92 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	e000      	b.n	8005e94 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e02f      	b.n	8005f30 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00f      	beq.n	8005efa <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6852      	ldr	r2, [r2, #4]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	4611      	mov	r1, r2
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005efa:	2340      	movs	r3, #64	; 0x40
 8005efc:	2200      	movs	r2, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fae0 	bl	80074c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2240      	movs	r2, #64	; 0x40
 8005f12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f16:	2340      	movs	r3, #64	; 0x40
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fad2 	bl	80074c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2240      	movs	r2, #64	; 0x40
 8005f2c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	460b      	mov	r3, r1
 8005f42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d106      	bne.n	8005fa6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e012      	b.n	8005ff0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d10b      	bne.n	8005fee <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800600e:	2303      	movs	r3, #3
 8006010:	e014      	b.n	800603c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b03      	cmp	r3, #3
 800601c:	d10d      	bne.n	800603a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	4611      	mov	r1, r2
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800605a:	2303      	movs	r3, #3
 800605c:	e014      	b.n	8006088 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d10d      	bne.n	8006086 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b00      	cmp	r3, #0
 8006074:	d007      	beq.n	8006086 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	4611      	mov	r1, r2
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6852      	ldr	r2, [r2, #4]
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	4611      	mov	r1, r2
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
  }

  return USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060de:	b480      	push	{r7}
 80060e0:	b087      	sub	sp, #28
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	3301      	adds	r3, #1
 80060f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060fc:	8a3b      	ldrh	r3, [r7, #16]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	b21a      	sxth	r2, r3
 8006102:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006106:	4313      	orrs	r3, r2
 8006108:	b21b      	sxth	r3, r3
 800610a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800610c:	89fb      	ldrh	r3, [r7, #14]
}
 800610e:	4618      	mov	r0, r3
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d005      	beq.n	8006142 <USBD_StdDevReq+0x26>
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d853      	bhi.n	80061e2 <USBD_StdDevReq+0xc6>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <USBD_StdDevReq+0x3a>
 800613e:	2b20      	cmp	r3, #32
 8006140:	d14f      	bne.n	80061e2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
      break;
 8006154:	e04a      	b.n	80061ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	785b      	ldrb	r3, [r3, #1]
 800615a:	2b09      	cmp	r3, #9
 800615c:	d83b      	bhi.n	80061d6 <USBD_StdDevReq+0xba>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <USBD_StdDevReq+0x48>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	080061b9 	.word	0x080061b9
 8006168:	080061cd 	.word	0x080061cd
 800616c:	080061d7 	.word	0x080061d7
 8006170:	080061c3 	.word	0x080061c3
 8006174:	080061d7 	.word	0x080061d7
 8006178:	08006197 	.word	0x08006197
 800617c:	0800618d 	.word	0x0800618d
 8006180:	080061d7 	.word	0x080061d7
 8006184:	080061af 	.word	0x080061af
 8006188:	080061a1 	.word	0x080061a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9de 	bl	8006550 <USBD_GetDescriptor>
          break;
 8006194:	e024      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fb43 	bl	8006824 <USBD_SetAddress>
          break;
 800619e:	e01f      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fb82 	bl	80068ac <USBD_SetConfig>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
          break;
 80061ac:	e018      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc21 	bl	80069f8 <USBD_GetConfig>
          break;
 80061b6:	e013      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fc52 	bl	8006a64 <USBD_GetStatus>
          break;
 80061c0:	e00e      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fc81 	bl	8006acc <USBD_SetFeature>
          break;
 80061ca:	e009      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061cc:	6839      	ldr	r1, [r7, #0]
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fc90 	bl	8006af4 <USBD_ClrFeature>
          break;
 80061d4:	e004      	b.n	80061e0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fce7 	bl	8006bac <USBD_CtlError>
          break;
 80061de:	bf00      	nop
      }
      break;
 80061e0:	e004      	b.n	80061ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fce1 	bl	8006bac <USBD_CtlError>
      break;
 80061ea:	bf00      	nop
  }

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop

080061f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d005      	beq.n	800621e <USBD_StdItfReq+0x26>
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d82f      	bhi.n	8006276 <USBD_StdItfReq+0x7e>
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <USBD_StdItfReq+0x26>
 800621a:	2b20      	cmp	r3, #32
 800621c:	d12b      	bne.n	8006276 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	2b02      	cmp	r3, #2
 800622a:	d81d      	bhi.n	8006268 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	889b      	ldrh	r3, [r3, #4]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b01      	cmp	r3, #1
 8006234:	d813      	bhi.n	800625e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	88db      	ldrh	r3, [r3, #6]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d110      	bne.n	8006272 <USBD_StdItfReq+0x7a>
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10d      	bne.n	8006272 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fd73 	bl	8006d42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800625c:	e009      	b.n	8006272 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fca3 	bl	8006bac <USBD_CtlError>
          break;
 8006266:	e004      	b.n	8006272 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fc9e 	bl	8006bac <USBD_CtlError>
          break;
 8006270:	e000      	b.n	8006274 <USBD_StdItfReq+0x7c>
          break;
 8006272:	bf00      	nop
      }
      break;
 8006274:	e004      	b.n	8006280 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006276:	6839      	ldr	r1, [r7, #0]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fc97 	bl	8006bac <USBD_CtlError>
      break;
 800627e:	bf00      	nop
  }

  return ret;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	889b      	ldrh	r3, [r3, #4]
 800629c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d007      	beq.n	80062ba <USBD_StdEPReq+0x30>
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	f200 8145 	bhi.w	800653a <USBD_StdEPReq+0x2b0>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00c      	beq.n	80062ce <USBD_StdEPReq+0x44>
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	f040 8140 	bne.w	800653a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	e13a      	b.n	8006544 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d007      	beq.n	80062e6 <USBD_StdEPReq+0x5c>
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	f300 8129 	bgt.w	800652e <USBD_StdEPReq+0x2a4>
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d07f      	beq.n	80063e0 <USBD_StdEPReq+0x156>
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d03c      	beq.n	800635e <USBD_StdEPReq+0xd4>
 80062e4:	e123      	b.n	800652e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d002      	beq.n	80062f8 <USBD_StdEPReq+0x6e>
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d016      	beq.n	8006324 <USBD_StdEPReq+0x9a>
 80062f6:	e02c      	b.n	8006352 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00d      	beq.n	800631a <USBD_StdEPReq+0x90>
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d00a      	beq.n	800631a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f921 	bl	8007550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800630e:	2180      	movs	r1, #128	; 0x80
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 f91d 	bl	8007550 <USBD_LL_StallEP>
 8006316:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006318:	e020      	b.n	800635c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc45 	bl	8006bac <USBD_CtlError>
              break;
 8006322:	e01b      	b.n	800635c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	885b      	ldrh	r3, [r3, #2]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10e      	bne.n	800634a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800632c:	7bbb      	ldrb	r3, [r7, #14]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <USBD_StdEPReq+0xc0>
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d008      	beq.n	800634a <USBD_StdEPReq+0xc0>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	88db      	ldrh	r3, [r3, #6]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 f903 	bl	8007550 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fcf9 	bl	8006d42 <USBD_CtlSendStatus>

              break;
 8006350:	e004      	b.n	800635c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc29 	bl	8006bac <USBD_CtlError>
              break;
 800635a:	bf00      	nop
          }
          break;
 800635c:	e0ec      	b.n	8006538 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d002      	beq.n	8006370 <USBD_StdEPReq+0xe6>
 800636a:	2b03      	cmp	r3, #3
 800636c:	d016      	beq.n	800639c <USBD_StdEPReq+0x112>
 800636e:	e030      	b.n	80063d2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <USBD_StdEPReq+0x108>
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	2b80      	cmp	r3, #128	; 0x80
 800637a:	d00a      	beq.n	8006392 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 f8e5 	bl	8007550 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006386:	2180      	movs	r1, #128	; 0x80
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 f8e1 	bl	8007550 <USBD_LL_StallEP>
 800638e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006390:	e025      	b.n	80063de <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fc09 	bl	8006bac <USBD_CtlError>
              break;
 800639a:	e020      	b.n	80063de <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11b      	bne.n	80063dc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d004      	beq.n	80063b8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 f8eb 	bl	800758e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fcc2 	bl	8006d42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80063d0:	e004      	b.n	80063dc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fbe9 	bl	8006bac <USBD_CtlError>
              break;
 80063da:	e000      	b.n	80063de <USBD_StdEPReq+0x154>
              break;
 80063dc:	bf00      	nop
          }
          break;
 80063de:	e0ab      	b.n	8006538 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d002      	beq.n	80063f2 <USBD_StdEPReq+0x168>
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d032      	beq.n	8006456 <USBD_StdEPReq+0x1cc>
 80063f0:	e097      	b.n	8006522 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <USBD_StdEPReq+0x17e>
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	2b80      	cmp	r3, #128	; 0x80
 80063fc:	d004      	beq.n	8006408 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fbd3 	bl	8006bac <USBD_CtlError>
                break;
 8006406:	e091      	b.n	800652c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800640c:	2b00      	cmp	r3, #0
 800640e:	da0b      	bge.n	8006428 <USBD_StdEPReq+0x19e>
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	3310      	adds	r3, #16
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	3304      	adds	r3, #4
 8006426:	e00b      	b.n	8006440 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	3304      	adds	r3, #4
 8006440:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2202      	movs	r2, #2
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fc1d 	bl	8006c8e <USBD_CtlSendData>
              break;
 8006454:	e06a      	b.n	800652c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006456:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800645a:	2b00      	cmp	r3, #0
 800645c:	da11      	bge.n	8006482 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	3324      	adds	r3, #36	; 0x24
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d117      	bne.n	80064a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fb96 	bl	8006bac <USBD_CtlError>
                  break;
 8006480:	e054      	b.n	800652c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	f003 020f 	and.w	r2, r3, #15
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fb83 	bl	8006bac <USBD_CtlError>
                  break;
 80064a6:	e041      	b.n	800652c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da0b      	bge.n	80064c8 <USBD_StdEPReq+0x23e>
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	3310      	adds	r3, #16
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	e00b      	b.n	80064e0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	3304      	adds	r3, #4
 80064e0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <USBD_StdEPReq+0x264>
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d103      	bne.n	80064f6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	e00e      	b.n	8006514 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 f866 	bl	80075cc <USBD_LL_IsStallEP>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	e002      	b.n	8006514 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2202      	movs	r2, #2
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fbb7 	bl	8006c8e <USBD_CtlSendData>
              break;
 8006520:	e004      	b.n	800652c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fb41 	bl	8006bac <USBD_CtlError>
              break;
 800652a:	bf00      	nop
          }
          break;
 800652c:	e004      	b.n	8006538 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb3b 	bl	8006bac <USBD_CtlError>
          break;
 8006536:	bf00      	nop
      }
      break;
 8006538:	e004      	b.n	8006544 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fb35 	bl	8006bac <USBD_CtlError>
      break;
 8006542:	bf00      	nop
  }

  return ret;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	885b      	ldrh	r3, [r3, #2]
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	2b06      	cmp	r3, #6
 8006572:	f200 8128 	bhi.w	80067c6 <USBD_GetDescriptor+0x276>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <USBD_GetDescriptor+0x2c>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	08006599 	.word	0x08006599
 8006580:	080065b1 	.word	0x080065b1
 8006584:	080065f1 	.word	0x080065f1
 8006588:	080067c7 	.word	0x080067c7
 800658c:	080067c7 	.word	0x080067c7
 8006590:	08006767 	.word	0x08006767
 8006594:	08006793 	.word	0x08006793
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	7c12      	ldrb	r2, [r2, #16]
 80065a4:	f107 0108 	add.w	r1, r7, #8
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
 80065ac:	60f8      	str	r0, [r7, #12]
      break;
 80065ae:	e112      	b.n	80067d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	7c1b      	ldrb	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10d      	bne.n	80065d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	f107 0208 	add.w	r2, r7, #8
 80065c4:	4610      	mov	r0, r2
 80065c6:	4798      	blx	r3
 80065c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	2202      	movs	r2, #2
 80065d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065d2:	e100      	b.n	80067d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	f107 0208 	add.w	r2, r7, #8
 80065e0:	4610      	mov	r0, r2
 80065e2:	4798      	blx	r3
 80065e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	2202      	movs	r2, #2
 80065ec:	701a      	strb	r2, [r3, #0]
      break;
 80065ee:	e0f2      	b.n	80067d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	885b      	ldrh	r3, [r3, #2]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b05      	cmp	r3, #5
 80065f8:	f200 80ac 	bhi.w	8006754 <USBD_GetDescriptor+0x204>
 80065fc:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <USBD_GetDescriptor+0xb4>)
 80065fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006602:	bf00      	nop
 8006604:	0800661d 	.word	0x0800661d
 8006608:	08006651 	.word	0x08006651
 800660c:	08006685 	.word	0x08006685
 8006610:	080066b9 	.word	0x080066b9
 8006614:	080066ed 	.word	0x080066ed
 8006618:	08006721 	.word	0x08006721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	7c12      	ldrb	r2, [r2, #16]
 8006634:	f107 0108 	add.w	r1, r7, #8
 8006638:	4610      	mov	r0, r2
 800663a:	4798      	blx	r3
 800663c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800663e:	e091      	b.n	8006764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fab2 	bl	8006bac <USBD_CtlError>
            err++;
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	3301      	adds	r3, #1
 800664c:	72fb      	strb	r3, [r7, #11]
          break;
 800664e:	e089      	b.n	8006764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	7c12      	ldrb	r2, [r2, #16]
 8006668:	f107 0108 	add.w	r1, r7, #8
 800666c:	4610      	mov	r0, r2
 800666e:	4798      	blx	r3
 8006670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006672:	e077      	b.n	8006764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa98 	bl	8006bac <USBD_CtlError>
            err++;
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	3301      	adds	r3, #1
 8006680:	72fb      	strb	r3, [r7, #11]
          break;
 8006682:	e06f      	b.n	8006764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	7c12      	ldrb	r2, [r2, #16]
 800669c:	f107 0108 	add.w	r1, r7, #8
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
 80066a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066a6:	e05d      	b.n	8006764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa7e 	bl	8006bac <USBD_CtlError>
            err++;
 80066b0:	7afb      	ldrb	r3, [r7, #11]
 80066b2:	3301      	adds	r3, #1
 80066b4:	72fb      	strb	r3, [r7, #11]
          break;
 80066b6:	e055      	b.n	8006764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	7c12      	ldrb	r2, [r2, #16]
 80066d0:	f107 0108 	add.w	r1, r7, #8
 80066d4:	4610      	mov	r0, r2
 80066d6:	4798      	blx	r3
 80066d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066da:	e043      	b.n	8006764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa64 	bl	8006bac <USBD_CtlError>
            err++;
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	3301      	adds	r3, #1
 80066e8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ea:	e03b      	b.n	8006764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	7c12      	ldrb	r2, [r2, #16]
 8006704:	f107 0108 	add.w	r1, r7, #8
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800670e:	e029      	b.n	8006764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa4a 	bl	8006bac <USBD_CtlError>
            err++;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
          break;
 800671e:	e021      	b.n	8006764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	7c12      	ldrb	r2, [r2, #16]
 8006738:	f107 0108 	add.w	r1, r7, #8
 800673c:	4610      	mov	r0, r2
 800673e:	4798      	blx	r3
 8006740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006742:	e00f      	b.n	8006764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fa30 	bl	8006bac <USBD_CtlError>
            err++;
 800674c:	7afb      	ldrb	r3, [r7, #11]
 800674e:	3301      	adds	r3, #1
 8006750:	72fb      	strb	r3, [r7, #11]
          break;
 8006752:	e007      	b.n	8006764 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa28 	bl	8006bac <USBD_CtlError>
          err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006762:	bf00      	nop
      }
      break;
 8006764:	e037      	b.n	80067d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7c1b      	ldrb	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	f107 0208 	add.w	r2, r7, #8
 800677a:	4610      	mov	r0, r2
 800677c:	4798      	blx	r3
 800677e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006780:	e029      	b.n	80067d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fa11 	bl	8006bac <USBD_CtlError>
        err++;
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	3301      	adds	r3, #1
 800678e:	72fb      	strb	r3, [r7, #11]
      break;
 8006790:	e021      	b.n	80067d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	7c1b      	ldrb	r3, [r3, #16]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10d      	bne.n	80067b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f107 0208 	add.w	r2, r7, #8
 80067a6:	4610      	mov	r0, r2
 80067a8:	4798      	blx	r3
 80067aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	2207      	movs	r2, #7
 80067b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067b4:	e00f      	b.n	80067d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9f7 	bl	8006bac <USBD_CtlError>
        err++;
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	3301      	adds	r3, #1
 80067c2:	72fb      	strb	r3, [r7, #11]
      break;
 80067c4:	e007      	b.n	80067d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f9ef 	bl	8006bac <USBD_CtlError>
      err++;
 80067ce:	7afb      	ldrb	r3, [r7, #11]
 80067d0:	3301      	adds	r3, #1
 80067d2:	72fb      	strb	r3, [r7, #11]
      break;
 80067d4:	bf00      	nop
  }

  if (err != 0U)
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11e      	bne.n	800681a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	88db      	ldrh	r3, [r3, #6]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d016      	beq.n	8006812 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067e4:	893b      	ldrh	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	88da      	ldrh	r2, [r3, #6]
 80067ee:	893b      	ldrh	r3, [r7, #8]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	bf28      	it	cs
 80067f4:	4613      	movcs	r3, r2
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067fa:	893b      	ldrh	r3, [r7, #8]
 80067fc:	461a      	mov	r2, r3
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 fa44 	bl	8006c8e <USBD_CtlSendData>
 8006806:	e009      	b.n	800681c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006808:	6839      	ldr	r1, [r7, #0]
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9ce 	bl	8006bac <USBD_CtlError>
 8006810:	e004      	b.n	800681c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa95 	bl	8006d42 <USBD_CtlSendStatus>
 8006818:	e000      	b.n	800681c <USBD_GetDescriptor+0x2cc>
    return;
 800681a:	bf00      	nop
  }
}
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop

08006824 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	889b      	ldrh	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d131      	bne.n	800689a <USBD_SetAddress+0x76>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88db      	ldrh	r3, [r3, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d12d      	bne.n	800689a <USBD_SetAddress+0x76>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	885b      	ldrh	r3, [r3, #2]
 8006842:	2b7f      	cmp	r3, #127	; 0x7f
 8006844:	d829      	bhi.n	800689a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	885b      	ldrh	r3, [r3, #2]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b03      	cmp	r3, #3
 800685c:	d104      	bne.n	8006868 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f9a3 	bl	8006bac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006866:	e01d      	b.n	80068a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7bfa      	ldrb	r2, [r7, #15]
 800686c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fed5 	bl	8007624 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa61 	bl	8006d42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800688e:	e009      	b.n	80068a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006898:	e004      	b.n	80068a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800689a:	6839      	ldr	r1, [r7, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f985 	bl	8006bac <USBD_CtlError>
  }
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	885b      	ldrh	r3, [r3, #2]
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	4b4c      	ldr	r3, [pc, #304]	; (80069f4 <USBD_SetConfig+0x148>)
 80068c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068c4:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <USBD_SetConfig+0x148>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d905      	bls.n	80068d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f96c 	bl	8006bac <USBD_CtlError>
    return USBD_FAIL;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e088      	b.n	80069ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d002      	beq.n	80068ea <USBD_SetConfig+0x3e>
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d025      	beq.n	8006934 <USBD_SetConfig+0x88>
 80068e8:	e071      	b.n	80069ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068ea:	4b42      	ldr	r3, [pc, #264]	; (80069f4 <USBD_SetConfig+0x148>)
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01c      	beq.n	800692c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80068f2:	4b40      	ldr	r3, [pc, #256]	; (80069f4 <USBD_SetConfig+0x148>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068fc:	4b3d      	ldr	r3, [pc, #244]	; (80069f4 <USBD_SetConfig+0x148>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff f948 	bl	8005b98 <USBD_SetClassConfig>
 8006908:	4603      	mov	r3, r0
 800690a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f949 	bl	8006bac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800691a:	e065      	b.n	80069e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa10 	bl	8006d42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2203      	movs	r2, #3
 8006926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800692a:	e05d      	b.n	80069e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa08 	bl	8006d42 <USBD_CtlSendStatus>
      break;
 8006932:	e059      	b.n	80069e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006934:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <USBD_SetConfig+0x148>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d112      	bne.n	8006962 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006944:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <USBD_SetConfig+0x148>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800694e:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <USBD_SetConfig+0x148>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff f93b 	bl	8005bd0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9f1 	bl	8006d42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006960:	e042      	b.n	80069e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006962:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <USBD_SetConfig+0x148>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d02a      	beq.n	80069c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff f929 	bl	8005bd0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800697e:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <USBD_SetConfig+0x148>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006988:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <USBD_SetConfig+0x148>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7ff f902 	bl	8005b98 <USBD_SetClassConfig>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006998:	7bfb      	ldrb	r3, [r7, #15]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00f      	beq.n	80069be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f903 	bl	8006bac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff f90e 	bl	8005bd0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069bc:	e014      	b.n	80069e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f9bf 	bl	8006d42 <USBD_CtlSendStatus>
      break;
 80069c4:	e010      	b.n	80069e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9bb 	bl	8006d42 <USBD_CtlSendStatus>
      break;
 80069cc:	e00c      	b.n	80069e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f8eb 	bl	8006bac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <USBD_SetConfig+0x148>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff f8f7 	bl	8005bd0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069e2:	2303      	movs	r3, #3
 80069e4:	73fb      	strb	r3, [r7, #15]
      break;
 80069e6:	bf00      	nop
  }

  return ret;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000019c 	.word	0x2000019c

080069f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	88db      	ldrh	r3, [r3, #6]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d004      	beq.n	8006a14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f8cd 	bl	8006bac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a12:	e023      	b.n	8006a5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	dc02      	bgt.n	8006a26 <USBD_GetConfig+0x2e>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc03      	bgt.n	8006a2c <USBD_GetConfig+0x34>
 8006a24:	e015      	b.n	8006a52 <USBD_GetConfig+0x5a>
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d00b      	beq.n	8006a42 <USBD_GetConfig+0x4a>
 8006a2a:	e012      	b.n	8006a52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3308      	adds	r3, #8
 8006a36:	2201      	movs	r2, #1
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f927 	bl	8006c8e <USBD_CtlSendData>
        break;
 8006a40:	e00c      	b.n	8006a5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3304      	adds	r3, #4
 8006a46:	2201      	movs	r2, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f91f 	bl	8006c8e <USBD_CtlSendData>
        break;
 8006a50:	e004      	b.n	8006a5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f8a9 	bl	8006bac <USBD_CtlError>
        break;
 8006a5a:	bf00      	nop
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	3b01      	subs	r3, #1
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d81e      	bhi.n	8006aba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	88db      	ldrh	r3, [r3, #6]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d004      	beq.n	8006a8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f890 	bl	8006bac <USBD_CtlError>
        break;
 8006a8c:	e01a      	b.n	8006ac4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f043 0202 	orr.w	r2, r3, #2
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	330c      	adds	r3, #12
 8006aae:	2202      	movs	r2, #2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f8eb 	bl	8006c8e <USBD_CtlSendData>
      break;
 8006ab8:	e004      	b.n	8006ac4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f875 	bl	8006bac <USBD_CtlError>
      break;
 8006ac2:	bf00      	nop
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	885b      	ldrh	r3, [r3, #2]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d106      	bne.n	8006aec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f92b 	bl	8006d42 <USBD_CtlSendStatus>
  }
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d80b      	bhi.n	8006b24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	885b      	ldrh	r3, [r3, #2]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d10c      	bne.n	8006b2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f910 	bl	8006d42 <USBD_CtlSendStatus>
      }
      break;
 8006b22:	e004      	b.n	8006b2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f840 	bl	8006bac <USBD_CtlError>
      break;
 8006b2c:	e000      	b.n	8006b30 <USBD_ClrFeature+0x3c>
      break;
 8006b2e:	bf00      	nop
  }
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	781a      	ldrb	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f7ff fabb 	bl	80060de <SWAPBYTE>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff faae 	bl	80060de <SWAPBYTE>
 8006b82:	4603      	mov	r3, r0
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3301      	adds	r3, #1
 8006b94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff faa1 	bl	80060de <SWAPBYTE>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	80da      	strh	r2, [r3, #6]
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bb6:	2180      	movs	r1, #128	; 0x80
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fcc9 	bl	8007550 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fcc5 	bl	8007550 <USBD_LL_StallEP>
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b086      	sub	sp, #24
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d036      	beq.n	8006c52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006be8:	6938      	ldr	r0, [r7, #16]
 8006bea:	f000 f836 	bl	8006c5a <USBD_GetLen>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	7812      	ldrb	r2, [r2, #0]
 8006c06:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	4413      	add	r3, r2
 8006c14:	2203      	movs	r2, #3
 8006c16:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c1e:	e013      	b.n	8006c48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	4413      	add	r3, r2
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	7812      	ldrb	r2, [r2, #0]
 8006c2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	613b      	str	r3, [r7, #16]
    idx++;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	3301      	adds	r3, #1
 8006c36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	3301      	adds	r3, #1
 8006c46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1e7      	bne.n	8006c20 <USBD_GetString+0x52>
 8006c50:	e000      	b.n	8006c54 <USBD_GetString+0x86>
    return;
 8006c52:	bf00      	nop
  }
}
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b085      	sub	sp, #20
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c6a:	e005      	b.n	8006c78 <USBD_GetLen+0x1e>
  {
    len++;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f5      	bne.n	8006c6c <USBD_GetLen+0x12>
  }

  return len;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 fcd4 	bl	8007662 <USBD_LL_Transmit>

  return USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fcc3 	bl	8007662 <USBD_LL_Transmit>

  return USBD_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	2100      	movs	r1, #0
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 fcc7 	bl	80076a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	2100      	movs	r1, #0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fcb6 	bl	80076a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b082      	sub	sp, #8
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d52:	2300      	movs	r3, #0
 8006d54:	2200      	movs	r2, #0
 8006d56:	2100      	movs	r1, #0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc82 	bl	8007662 <USBD_LL_Transmit>

  return USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2205      	movs	r2, #5
 8006d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fc90 	bl	80076a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d94:	2200      	movs	r2, #0
 8006d96:	4912      	ldr	r1, [pc, #72]	; (8006de0 <MX_USB_DEVICE_Init+0x50>)
 8006d98:	4812      	ldr	r0, [pc, #72]	; (8006de4 <MX_USB_DEVICE_Init+0x54>)
 8006d9a:	f7fe fe8f 	bl	8005abc <USBD_Init>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006da4:	f7f9 fdea 	bl	800097c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006da8:	490f      	ldr	r1, [pc, #60]	; (8006de8 <MX_USB_DEVICE_Init+0x58>)
 8006daa:	480e      	ldr	r0, [pc, #56]	; (8006de4 <MX_USB_DEVICE_Init+0x54>)
 8006dac:	f7fe feb6 	bl	8005b1c <USBD_RegisterClass>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006db6:	f7f9 fde1 	bl	800097c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006dba:	490c      	ldr	r1, [pc, #48]	; (8006dec <MX_USB_DEVICE_Init+0x5c>)
 8006dbc:	4809      	ldr	r0, [pc, #36]	; (8006de4 <MX_USB_DEVICE_Init+0x54>)
 8006dbe:	f7fe fe07 	bl	80059d0 <USBD_CDC_RegisterInterface>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dc8:	f7f9 fdd8 	bl	800097c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dcc:	4805      	ldr	r0, [pc, #20]	; (8006de4 <MX_USB_DEVICE_Init+0x54>)
 8006dce:	f7fe fecc 	bl	8005b6a <USBD_Start>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006dd8:	f7f9 fdd0 	bl	800097c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006ddc:	bf00      	nop
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000130 	.word	0x20000130
 8006de4:	200004b8 	.word	0x200004b8
 8006de8:	20000018 	.word	0x20000018
 8006dec:	2000011c 	.word	0x2000011c

08006df0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006df4:	2200      	movs	r2, #0
 8006df6:	4905      	ldr	r1, [pc, #20]	; (8006e0c <CDC_Init_FS+0x1c>)
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <CDC_Init_FS+0x20>)
 8006dfa:	f7fe fdfe 	bl	80059fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dfe:	4905      	ldr	r1, [pc, #20]	; (8006e14 <CDC_Init_FS+0x24>)
 8006e00:	4803      	ldr	r0, [pc, #12]	; (8006e10 <CDC_Init_FS+0x20>)
 8006e02:	f7fe fe18 	bl	8005a36 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000f88 	.word	0x20000f88
 8006e10:	200004b8 	.word	0x200004b8
 8006e14:	20000788 	.word	0x20000788

08006e18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	6039      	str	r1, [r7, #0]
 8006e32:	71fb      	strb	r3, [r7, #7]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	2b23      	cmp	r3, #35	; 0x23
 8006e3c:	d84a      	bhi.n	8006ed4 <CDC_Control_FS+0xac>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <CDC_Control_FS+0x1c>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006ed5 	.word	0x08006ed5
 8006e48:	08006ed5 	.word	0x08006ed5
 8006e4c:	08006ed5 	.word	0x08006ed5
 8006e50:	08006ed5 	.word	0x08006ed5
 8006e54:	08006ed5 	.word	0x08006ed5
 8006e58:	08006ed5 	.word	0x08006ed5
 8006e5c:	08006ed5 	.word	0x08006ed5
 8006e60:	08006ed5 	.word	0x08006ed5
 8006e64:	08006ed5 	.word	0x08006ed5
 8006e68:	08006ed5 	.word	0x08006ed5
 8006e6c:	08006ed5 	.word	0x08006ed5
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006ed5 	.word	0x08006ed5
 8006e78:	08006ed5 	.word	0x08006ed5
 8006e7c:	08006ed5 	.word	0x08006ed5
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006ed5 	.word	0x08006ed5
 8006e8c:	08006ed5 	.word	0x08006ed5
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ed5 	.word	0x08006ed5
 8006e9c:	08006ed5 	.word	0x08006ed5
 8006ea0:	08006ed5 	.word	0x08006ed5
 8006ea4:	08006ed5 	.word	0x08006ed5
 8006ea8:	08006ed5 	.word	0x08006ed5
 8006eac:	08006ed5 	.word	0x08006ed5
 8006eb0:	08006ed5 	.word	0x08006ed5
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	08006ed5 	.word	0x08006ed5
 8006ebc:	08006ed5 	.word	0x08006ed5
 8006ec0:	08006ed5 	.word	0x08006ed5
 8006ec4:	08006ed5 	.word	0x08006ed5
 8006ec8:	08006ed5 	.word	0x08006ed5
 8006ecc:	08006ed5 	.word	0x08006ed5
 8006ed0:	08006ed5 	.word	0x08006ed5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ed4:	bf00      	nop
  }

  return (USBD_OK);
 8006ed6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4805      	ldr	r0, [pc, #20]	; (8006f08 <CDC_Receive_FS+0x24>)
 8006ef2:	f7fe fda0 	bl	8005a36 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ef6:	4804      	ldr	r0, [pc, #16]	; (8006f08 <CDC_Receive_FS+0x24>)
 8006ef8:	f7fe fdb6 	bl	8005a68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006efc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	200004b8 	.word	0x200004b8

08006f0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2212      	movs	r2, #18
 8006f40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f42:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	2000014c 	.word	0x2000014c

08006f54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	6039      	str	r1, [r7, #0]
 8006f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2204      	movs	r2, #4
 8006f64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f66:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	20000160 	.word	0x20000160

08006f78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f84:	79fb      	ldrb	r3, [r7, #7]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4907      	ldr	r1, [pc, #28]	; (8006fac <USBD_FS_ProductStrDescriptor+0x34>)
 8006f8e:	4808      	ldr	r0, [pc, #32]	; (8006fb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f90:	f7ff fe1d 	bl	8006bce <USBD_GetString>
 8006f94:	e004      	b.n	8006fa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <USBD_FS_ProductStrDescriptor+0x34>)
 8006f9a:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f9c:	f7ff fe17 	bl	8006bce <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20001788 	.word	0x20001788
 8006fb0:	08007804 	.word	0x08007804

08006fb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	6039      	str	r1, [r7, #0]
 8006fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	4904      	ldr	r1, [pc, #16]	; (8006fd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fc4:	4804      	ldr	r0, [pc, #16]	; (8006fd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fc6:	f7ff fe02 	bl	8006bce <USBD_GetString>
  return USBD_StrDesc;
 8006fca:	4b02      	ldr	r3, [pc, #8]	; (8006fd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20001788 	.word	0x20001788
 8006fd8:	0800781c 	.word	0x0800781c

08006fdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	221a      	movs	r2, #26
 8006fec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fee:	f000 f843 	bl	8007078 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ff2:	4b02      	ldr	r3, [pc, #8]	; (8006ffc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000164 	.word	0x20000164

08007000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	4603      	mov	r3, r0
 8007008:	6039      	str	r1, [r7, #0]
 800700a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d105      	bne.n	800701e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	4907      	ldr	r1, [pc, #28]	; (8007034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007016:	4808      	ldr	r0, [pc, #32]	; (8007038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007018:	f7ff fdd9 	bl	8006bce <USBD_GetString>
 800701c:	e004      	b.n	8007028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	4904      	ldr	r1, [pc, #16]	; (8007034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007022:	4805      	ldr	r0, [pc, #20]	; (8007038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007024:	f7ff fdd3 	bl	8006bce <USBD_GetString>
  }
  return USBD_StrDesc;
 8007028:	4b02      	ldr	r3, [pc, #8]	; (8007034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	20001788 	.word	0x20001788
 8007038:	08007830 	.word	0x08007830

0800703c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	4603      	mov	r3, r0
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007048:	79fb      	ldrb	r3, [r7, #7]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d105      	bne.n	800705a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4907      	ldr	r1, [pc, #28]	; (8007070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007052:	4808      	ldr	r0, [pc, #32]	; (8007074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007054:	f7ff fdbb 	bl	8006bce <USBD_GetString>
 8007058:	e004      	b.n	8007064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4904      	ldr	r1, [pc, #16]	; (8007070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800705e:	4805      	ldr	r0, [pc, #20]	; (8007074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007060:	f7ff fdb5 	bl	8006bce <USBD_GetString>
  }
  return USBD_StrDesc;
 8007064:	4b02      	ldr	r3, [pc, #8]	; (8007070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20001788 	.word	0x20001788
 8007074:	0800783c 	.word	0x0800783c

08007078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800707e:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <Get_SerialNum+0x44>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007084:	4b0e      	ldr	r3, [pc, #56]	; (80070c0 <Get_SerialNum+0x48>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800708a:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <Get_SerialNum+0x4c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4413      	add	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800709e:	2208      	movs	r2, #8
 80070a0:	4909      	ldr	r1, [pc, #36]	; (80070c8 <Get_SerialNum+0x50>)
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f814 	bl	80070d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070a8:	2204      	movs	r2, #4
 80070aa:	4908      	ldr	r1, [pc, #32]	; (80070cc <Get_SerialNum+0x54>)
 80070ac:	68b8      	ldr	r0, [r7, #8]
 80070ae:	f000 f80f 	bl	80070d0 <IntToUnicode>
  }
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	1fff7a10 	.word	0x1fff7a10
 80070c0:	1fff7a14 	.word	0x1fff7a14
 80070c4:	1fff7a18 	.word	0x1fff7a18
 80070c8:	20000166 	.word	0x20000166
 80070cc:	20000176 	.word	0x20000176

080070d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b087      	sub	sp, #28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	4613      	mov	r3, r2
 80070dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
 80070e6:	e027      	b.n	8007138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	0f1b      	lsrs	r3, r3, #28
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	d80b      	bhi.n	8007108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0f1b      	lsrs	r3, r3, #28
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4619      	mov	r1, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	440b      	add	r3, r1
 8007100:	3230      	adds	r2, #48	; 0x30
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	701a      	strb	r2, [r3, #0]
 8007106:	e00a      	b.n	800711e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	0f1b      	lsrs	r3, r3, #28
 800710c:	b2da      	uxtb	r2, r3
 800710e:	7dfb      	ldrb	r3, [r7, #23]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4619      	mov	r1, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	440b      	add	r3, r1
 8007118:	3237      	adds	r2, #55	; 0x37
 800711a:	b2d2      	uxtb	r2, r2
 800711c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	011b      	lsls	r3, r3, #4
 8007122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	3301      	adds	r3, #1
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4413      	add	r3, r2
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007132:	7dfb      	ldrb	r3, [r7, #23]
 8007134:	3301      	adds	r3, #1
 8007136:	75fb      	strb	r3, [r7, #23]
 8007138:	7dfa      	ldrb	r2, [r7, #23]
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	429a      	cmp	r2, r3
 800713e:	d3d3      	bcc.n	80070e8 <IntToUnicode+0x18>
  }
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007170:	d147      	bne.n	8007202 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	4b25      	ldr	r3, [pc, #148]	; (800720c <HAL_PCD_MspInit+0xbc>)
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	4a24      	ldr	r2, [pc, #144]	; (800720c <HAL_PCD_MspInit+0xbc>)
 800717c:	f043 0301 	orr.w	r3, r3, #1
 8007180:	6313      	str	r3, [r2, #48]	; 0x30
 8007182:	4b22      	ldr	r3, [pc, #136]	; (800720c <HAL_PCD_MspInit+0xbc>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800718e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007194:	2300      	movs	r3, #0
 8007196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800719c:	f107 0314 	add.w	r3, r7, #20
 80071a0:	4619      	mov	r1, r3
 80071a2:	481b      	ldr	r0, [pc, #108]	; (8007210 <HAL_PCD_MspInit+0xc0>)
 80071a4:	f7f9 ff28 	bl	8000ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80071a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80071ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ae:	2302      	movs	r3, #2
 80071b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071ba:	230a      	movs	r3, #10
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071be:	f107 0314 	add.w	r3, r7, #20
 80071c2:	4619      	mov	r1, r3
 80071c4:	4812      	ldr	r0, [pc, #72]	; (8007210 <HAL_PCD_MspInit+0xc0>)
 80071c6:	f7f9 ff17 	bl	8000ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <HAL_PCD_MspInit+0xbc>)
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	4a0f      	ldr	r2, [pc, #60]	; (800720c <HAL_PCD_MspInit+0xbc>)
 80071d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d4:	6353      	str	r3, [r2, #52]	; 0x34
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <HAL_PCD_MspInit+0xbc>)
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	4a0b      	ldr	r2, [pc, #44]	; (800720c <HAL_PCD_MspInit+0xbc>)
 80071e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071e4:	6453      	str	r3, [r2, #68]	; 0x44
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_PCD_MspInit+0xbc>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071f2:	2200      	movs	r2, #0
 80071f4:	2100      	movs	r1, #0
 80071f6:	2043      	movs	r0, #67	; 0x43
 80071f8:	f7f9 fec7 	bl	8000f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071fc:	2043      	movs	r0, #67	; 0x43
 80071fe:	f7f9 fee0 	bl	8000fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007202:	bf00      	nop
 8007204:	3728      	adds	r7, #40	; 0x28
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	40023800 	.word	0x40023800
 8007210:	40020000 	.word	0x40020000

08007214 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007228:	4619      	mov	r1, r3
 800722a:	4610      	mov	r0, r2
 800722c:	f7fe fce8 	bl	8005c00 <USBD_LL_SetupStage>
}
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800724a:	78fa      	ldrb	r2, [r7, #3]
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	4613      	mov	r3, r2
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	440b      	add	r3, r1
 8007258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	4619      	mov	r1, r3
 8007262:	f7fe fd22 	bl	8005caa <USBD_LL_DataOutStage>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	460b      	mov	r3, r1
 8007278:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	6879      	ldr	r1, [r7, #4]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	440b      	add	r3, r1
 800728e:	3348      	adds	r3, #72	; 0x48
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	4619      	mov	r1, r3
 8007296:	f7fe fd6b 	bl	8005d70 <USBD_LL_DataInStage>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b082      	sub	sp, #8
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fe7f 	bl	8005fb4 <USBD_LL_SOF>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e008      	b.n	80072ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d102      	bne.n	80072e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
 80072e4:	e001      	b.n	80072ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072e6:	f7f9 fb49 	bl	800097c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072f0:	7bfa      	ldrb	r2, [r7, #15]
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fe1f 	bl	8005f38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fdcb 	bl	8005e9c <USBD_LL_Reset>
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fe1a 	bl	8005f58 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6812      	ldr	r2, [r2, #0]
 8007332:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <HAL_PCD_SuspendCallback+0x48>)
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	4a03      	ldr	r2, [pc, #12]	; (8007358 <HAL_PCD_SuspendCallback+0x48>)
 800734a:	f043 0306 	orr.w	r3, r3, #6
 800734e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed00 	.word	0xe000ed00

0800735c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fe0a 	bl	8005f84 <USBD_LL_Resume>
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800738a:	78fa      	ldrb	r2, [r7, #3]
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fe58 	bl	8006044 <USBD_LL_IsoOUTIncomplete>
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe fe20 	bl	8005ff8 <USBD_LL_IsoINIncomplete>
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fe5e 	bl	8006090 <USBD_LL_DevConnected>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fe5b 	bl	80060a6 <USBD_LL_DevDisconnected>
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d13c      	bne.n	8007482 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007408:	4a20      	ldr	r2, [pc, #128]	; (800748c <USBD_LL_Init+0x94>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a1e      	ldr	r2, [pc, #120]	; (800748c <USBD_LL_Init+0x94>)
 8007414:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007418:	4b1c      	ldr	r3, [pc, #112]	; (800748c <USBD_LL_Init+0x94>)
 800741a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800741e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007420:	4b1a      	ldr	r3, [pc, #104]	; (800748c <USBD_LL_Init+0x94>)
 8007422:	2204      	movs	r2, #4
 8007424:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007426:	4b19      	ldr	r3, [pc, #100]	; (800748c <USBD_LL_Init+0x94>)
 8007428:	2202      	movs	r2, #2
 800742a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800742c:	4b17      	ldr	r3, [pc, #92]	; (800748c <USBD_LL_Init+0x94>)
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <USBD_LL_Init+0x94>)
 8007434:	2202      	movs	r2, #2
 8007436:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007438:	4b14      	ldr	r3, [pc, #80]	; (800748c <USBD_LL_Init+0x94>)
 800743a:	2200      	movs	r2, #0
 800743c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800743e:	4b13      	ldr	r3, [pc, #76]	; (800748c <USBD_LL_Init+0x94>)
 8007440:	2200      	movs	r2, #0
 8007442:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007444:	4b11      	ldr	r3, [pc, #68]	; (800748c <USBD_LL_Init+0x94>)
 8007446:	2200      	movs	r2, #0
 8007448:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <USBD_LL_Init+0x94>)
 800744c:	2201      	movs	r2, #1
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <USBD_LL_Init+0x94>)
 8007452:	2200      	movs	r2, #0
 8007454:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007456:	480d      	ldr	r0, [pc, #52]	; (800748c <USBD_LL_Init+0x94>)
 8007458:	f7fa fd68 	bl	8001f2c <HAL_PCD_Init>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007462:	f7f9 fa8b 	bl	800097c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	4808      	ldr	r0, [pc, #32]	; (800748c <USBD_LL_Init+0x94>)
 800746a:	f7fb fec6 	bl	80031fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	2100      	movs	r1, #0
 8007472:	4806      	ldr	r0, [pc, #24]	; (800748c <USBD_LL_Init+0x94>)
 8007474:	f7fb fe7a 	bl	800316c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007478:	2280      	movs	r2, #128	; 0x80
 800747a:	2101      	movs	r1, #1
 800747c:	4803      	ldr	r0, [pc, #12]	; (800748c <USBD_LL_Init+0x94>)
 800747e:	f7fb fe75 	bl	800316c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20001988 	.word	0x20001988

08007490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fa fe5d 	bl	8002166 <HAL_PCD_Start>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 f942 	bl	800773c <USBD_Get_USB_Status>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	461a      	mov	r2, r3
 80074d4:	4603      	mov	r3, r0
 80074d6:	70fb      	strb	r3, [r7, #3]
 80074d8:	460b      	mov	r3, r1
 80074da:	70bb      	strb	r3, [r7, #2]
 80074dc:	4613      	mov	r3, r2
 80074de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074ee:	78bb      	ldrb	r3, [r7, #2]
 80074f0:	883a      	ldrh	r2, [r7, #0]
 80074f2:	78f9      	ldrb	r1, [r7, #3]
 80074f4:	f7fb fa41 	bl	800297a <HAL_PCD_EP_Open>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 f91c 	bl	800773c <USBD_Get_USB_Status>
 8007504:	4603      	mov	r3, r0
 8007506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007508:	7bbb      	ldrb	r3, [r7, #14]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	4611      	mov	r1, r2
 8007530:	4618      	mov	r0, r3
 8007532:	f7fb fa8a 	bl	8002a4a <HAL_PCD_EP_Close>
 8007536:	4603      	mov	r3, r0
 8007538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f8fd 	bl	800773c <USBD_Get_USB_Status>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007546:	7bbb      	ldrb	r3, [r7, #14]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	4611      	mov	r1, r2
 800756e:	4618      	mov	r0, r3
 8007570:	f7fb fb62 	bl	8002c38 <HAL_PCD_EP_SetStall>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	4618      	mov	r0, r3
 800757c:	f000 f8de 	bl	800773c <USBD_Get_USB_Status>
 8007580:	4603      	mov	r3, r0
 8007582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007584:	7bbb      	ldrb	r3, [r7, #14]
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	460b      	mov	r3, r1
 8007598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb fba7 	bl	8002d00 <HAL_PCD_EP_ClrStall>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b6:	7bfb      	ldrb	r3, [r7, #15]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 f8bf 	bl	800773c <USBD_Get_USB_Status>
 80075be:	4603      	mov	r3, r0
 80075c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da0b      	bge.n	8007600 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075ee:	68f9      	ldr	r1, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	333e      	adds	r3, #62	; 0x3e
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	e00b      	b.n	8007618 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	1a9b      	subs	r3, r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007616:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fb f974 	bl	8002930 <HAL_PCD_SetAddress>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f874 	bl	800773c <USBD_Get_USB_Status>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007658:	7bbb      	ldrb	r3, [r7, #14]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b086      	sub	sp, #24
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007680:	7af9      	ldrb	r1, [r7, #11]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	f7fb fa8d 	bl	8002ba4 <HAL_PCD_EP_Transmit>
 800768a:	4603      	mov	r3, r0
 800768c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	4618      	mov	r0, r3
 8007692:	f000 f853 	bl	800773c <USBD_Get_USB_Status>
 8007696:	4603      	mov	r3, r0
 8007698:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800769a:	7dbb      	ldrb	r3, [r7, #22]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	607a      	str	r2, [r7, #4]
 80076ae:	603b      	str	r3, [r7, #0]
 80076b0:	460b      	mov	r3, r1
 80076b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b8:	2300      	movs	r3, #0
 80076ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076c2:	7af9      	ldrb	r1, [r7, #11]
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	f7fb fa09 	bl	8002ade <HAL_PCD_EP_Receive>
 80076cc:	4603      	mov	r3, r0
 80076ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d0:	7dfb      	ldrb	r3, [r7, #23]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f832 	bl	800773c <USBD_Get_USB_Status>
 80076d8:	4603      	mov	r3, r0
 80076da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3718      	adds	r7, #24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fb fa39 	bl	8002b74 <HAL_PCD_EP_GetRxCount>
 8007702:	4603      	mov	r3, r0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <USBD_static_malloc+0x18>)
}
 8007716:	4618      	mov	r0, r3
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	200001a0 	.word	0x200001a0

08007728 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	4603      	mov	r3, r0
 8007744:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	2b03      	cmp	r3, #3
 800774e:	d817      	bhi.n	8007780 <USBD_Get_USB_Status+0x44>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <USBD_Get_USB_Status+0x1c>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	0800776f 	.word	0x0800776f
 8007760:	08007775 	.word	0x08007775
 8007764:	0800777b 	.word	0x0800777b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e00b      	b.n	8007786 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800776e:	2303      	movs	r3, #3
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e008      	b.n	8007786 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	e005      	b.n	8007786 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800777a:	2303      	movs	r3, #3
 800777c:	73fb      	strb	r3, [r7, #15]
    break;
 800777e:	e002      	b.n	8007786 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	73fb      	strb	r3, [r7, #15]
    break;
 8007784:	bf00      	nop
  }
  return usb_status;
 8007786:	7bfb      	ldrb	r3, [r7, #15]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <__libc_init_array>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4d0d      	ldr	r5, [pc, #52]	; (80077cc <__libc_init_array+0x38>)
 8007798:	4c0d      	ldr	r4, [pc, #52]	; (80077d0 <__libc_init_array+0x3c>)
 800779a:	1b64      	subs	r4, r4, r5
 800779c:	10a4      	asrs	r4, r4, #2
 800779e:	2600      	movs	r6, #0
 80077a0:	42a6      	cmp	r6, r4
 80077a2:	d109      	bne.n	80077b8 <__libc_init_array+0x24>
 80077a4:	4d0b      	ldr	r5, [pc, #44]	; (80077d4 <__libc_init_array+0x40>)
 80077a6:	4c0c      	ldr	r4, [pc, #48]	; (80077d8 <__libc_init_array+0x44>)
 80077a8:	f000 f820 	bl	80077ec <_init>
 80077ac:	1b64      	subs	r4, r4, r5
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	2600      	movs	r6, #0
 80077b2:	42a6      	cmp	r6, r4
 80077b4:	d105      	bne.n	80077c2 <__libc_init_array+0x2e>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077bc:	4798      	blx	r3
 80077be:	3601      	adds	r6, #1
 80077c0:	e7ee      	b.n	80077a0 <__libc_init_array+0xc>
 80077c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c6:	4798      	blx	r3
 80077c8:	3601      	adds	r6, #1
 80077ca:	e7f2      	b.n	80077b2 <__libc_init_array+0x1e>
 80077cc:	0800786c 	.word	0x0800786c
 80077d0:	0800786c 	.word	0x0800786c
 80077d4:	0800786c 	.word	0x0800786c
 80077d8:	08007870 	.word	0x08007870

080077dc <memset>:
 80077dc:	4402      	add	r2, r0
 80077de:	4603      	mov	r3, r0
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d100      	bne.n	80077e6 <memset+0xa>
 80077e4:	4770      	bx	lr
 80077e6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ea:	e7f9      	b.n	80077e0 <memset+0x4>

080077ec <_init>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	bf00      	nop
 80077f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077f2:	bc08      	pop	{r3}
 80077f4:	469e      	mov	lr, r3
 80077f6:	4770      	bx	lr

080077f8 <_fini>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr
